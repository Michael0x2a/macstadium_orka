---
openapi: 3.0.3
info:
  title: Orka API
  description: "The Orka API and SDK enable programmatic access to the Orka virtual machine management and orchestration tools. Additionally, MacStadium provides a [companion CLI](https://orkadocs.macstadium.com/docs/orka-cli), a web front end, and [several CI/CD plugins](https://orkadocs.macstadium.com/docs/downloads#section-cicd-integrations).\n\n## Administrative authentication\n\nAdministrative requests, such as creating users and resetting passwords, must contain the `orka-licensekey: <license>` header.\n\n## Token-based authentication\n\nNon-administrative requests require JWT-based authentication and must contain an `Authorization: Bearer <token>` header.\n\nCurrently, tokens do not expire. Administrators can revoke tokens.\n\n## Error codes\n\nError codes follow HTTP response code best practices but might include additional Orka-specific information.\n\n## Rate limit\n\nYou should not be able to reach the default rate limit during normal usage. If you need to make adjustments to your environment, please [contact us](https://portal.macstadium.com/).\n\n## macOS considerations\n\nOn macOS, be careful of the formatting for `\"` (quotation marks).\n\nSometimes, when you copy from the API documentation to the clipboard, quotation marks might be re-formatted to a different special character.\n\n## Service endpoint\n\nThe default Orka service endpoint (API URL) is usually `http://10.221.188.100` OR `http://10.10.10.100` OR a custom domain endpoint.\n\n> **How to find your Orka endpoint?**\n>\n> You can get the IP for your Orka endpoint from your [IP Plan](https://orkadocs.macstadium.com/docs/ip-plan). It's the `.100` address from your `Private-1` network. Usually, `10.221.188.100` or `10.10.10.100`. **You need to use `http://` with this service endpoint.**\n>\n> To get the custom domain for your Orka cluster (if enabled):\n> 1. Log into your [MacStadium account](https://portal.macstadium.com/).\n> 2. Go to **Subscriptions** (from the top right corner) and select your Orka cluster.\n> 3. In the **Subscription & Plan** details, find your custom domain at the bottom. If you don't see a custom domain field, it's not enabled for your environment yet. **You need to use `https://` with custom domains.**\n>\n>  You can use the IP service endpoint and your custom domain interchangeably.\n\n> **Using a custom domain?**\n>\n> If you're using OpenConnect to access your Orka cluster via VPN, you need to [add a DNS server](https://orkadocs.macstadium.com/docs/vpn-connect#configure-openconnect-to-access-orka-via-custom-domain) to your network configuration. \n>\n> If you're using Cisco AnyConnect on macOS or Linux, you're already set and you don't need to make any changes.\n>\n> If you're using Cisco AnyConnect on Windows, you need to [add a DNS server](https://orkadocs.macstadium.com/docs/vpn-connect#configure-anyconnect-to-access-orka-via-custom-domain) to your network configuration. "
  version: 1.0.0
  contact: {}
servers:
  - url: "{{domain}}"
paths:
  /default-base-image:
    get:
      tags:
        - Environment Checks
      summary: Get default base image
      description: "Retrieve the name of the default base image for the Orka environment.\n\nThis operation does not require authentication.\n\n\n\n\n\n---\n© 2019-2020 Copyright MacStadium, Inc. – Documentation built with [Postman](https://www.getpostman.com/). Orka is a registered trademark of MacStadium, Inc."
      operationId: getDefaultBaseImage
      responses:
        "200":
          description: Get default base image
          content:
            application/json:
              schema:
                type: object
                properties:
                  default_base_image:
                    type: string
                    example: "{{baseImage}}"
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Get default base image:
                  value:
                    default_base_image: "{{baseImage}}"
                    errors: []
                    help: {}
                    message: ""
  /health-check:
    get:
      tags:
        - Environment Checks
      summary: Check API version
      description: "Retrieve the current API version of your Orka environment.\n\nThis operation does not require authentication."
      operationId: checkApiVersion
      responses:
        "200":
          description: Check API version
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version:
                    type: string
                    example: "{{apiVersion}}"
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Check API version:
                  value:
                    api_version: "{{apiVersion}}"
                    errors: []
                    help: {}
                    message: ""
  /logs:
    delete:
      tags:
        - Logs 1.0 (deprecated)
      summary: Delete logs
      description: "Delete all logs for your Orka environment.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: deleteLogs
      responses:
        "200":
          description: Delete logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Deleted User Logs
              examples:
                Delete logs:
                  value:
                    errors: []
                    help: {}
                    message: Deleted User Logs
  /logs/query:
    post:
      tags:
        - Logs 2.0
      summary: List logs
      description: "Retrieve a log of all CLI commands and API requests executed against your Orka environment. \n\nThis is an administrative operation. You need to pass the `orka-licensekey: <license>` header.\n\nYou can optionally limit the amount of results returned with the `limit` query parameter."
      operationId: listLogs1
      parameters:
        - name: limit
          in: query
          schema:
            type: string
            example: "10"
          description: Limit the total number of logs returned
      responses:
        "200":
          description: Filter logs by string
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          type: object
                          properties:
                            stream:
                              type: object
                              properties:
                                log_type:
                                  type: string
                                  example: user_logs
                                service:
                                  type: string
                                  example: orka-logs
                            values:
                              type: array
                              items:
                                type: array
                                items:
                                  type: string
                                  example: "1655896120552266000"
                                example:
                                  - "1655896120552266000"
                                  - "{\"message\":{\"request\":{\"url\":\"/resources/vm/deploy\",\"method\":\"POST\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"content-type\":\"application/json\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"content-length\":\"114\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{\"orka_vm_name\":\"demo-logs\",\"replicas\":1,\"vnc_console\":true,\"tag\":\"\",\"tag_required\":false,\"gpu_passthrough\":false}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"921\",\"etag\":\"W/\\\"399-8ZKOtDk1phgqtHqhYO8LdCBfHr0\\\"\"},\"body\":{\"message\":\"Successfully deployed VM\",\"help\":{\"start_virtual_machine\":\"To start a VM send rest request to http://{{domain}}/resources/vm/exec/start\",\"stop_virtual_machine\":\"To stop a VM send rest request to http://{{domain}}/resources/vm/exec/stop\",\"resume_virtual_machine\":\"To resume a VM send rest request to http://{{domain}}/resources/vm/exec/resume\",\"suspend_virtual_machine\":\"To suspend a VM send rest request to http://{{domain}}/resources/vm/exec/suspend\",\"data_for_virtual_machine_exec_tasks\":{\"orka_vm_name\":\"demo-logs\",\"orka_node_name\":\"mini-1\"},\"virtual_machine_vnc\":\"Once started and deployed, you can use VNC to access it via {{vmIP}}:5999\"},\"errors\":[],\"ram\":\"16.00G\",\"vcpu\":\"3\",\"host_cpu\":\"3\",\"ip\":\"{{vmIP}}\",\"ssh_port\":\"8822\",\"screen_share_port\":\"5900\",\"vm_id\":\"84ac9cf673e7a\",\"port_warnings\":[],\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"vnc_port\":\"5999\"}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:40.548Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                              example:
                                - - "1655896120552266000"
                                  - "{\"message\":{\"request\":{\"url\":\"/resources/vm/deploy\",\"method\":\"POST\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"content-type\":\"application/json\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"content-length\":\"114\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{\"orka_vm_name\":\"demo-logs\",\"replicas\":1,\"vnc_console\":true,\"tag\":\"\",\"tag_required\":false,\"gpu_passthrough\":false}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"921\",\"etag\":\"W/\\\"399-8ZKOtDk1phgqtHqhYO8LdCBfHr0\\\"\"},\"body\":{\"message\":\"Successfully deployed VM\",\"help\":{\"start_virtual_machine\":\"To start a VM send rest request to http://{{domain}}/resources/vm/exec/start\",\"stop_virtual_machine\":\"To stop a VM send rest request to http://{{domain}}/resources/vm/exec/stop\",\"resume_virtual_machine\":\"To resume a VM send rest request to http://{{domain}}/resources/vm/exec/resume\",\"suspend_virtual_machine\":\"To suspend a VM send rest request to http://{{domain}}/resources/vm/exec/suspend\",\"data_for_virtual_machine_exec_tasks\":{\"orka_vm_name\":\"demo-logs\",\"orka_node_name\":\"mini-1\"},\"virtual_machine_vnc\":\"Once started and deployed, you can use VNC to access it via {{vmIP}}:5999\"},\"errors\":[],\"ram\":\"16.00G\",\"vcpu\":\"3\",\"host_cpu\":\"3\",\"ip\":\"{{vmIP}}\",\"ssh_port\":\"8822\",\"screen_share_port\":\"5900\",\"vm_id\":\"84ac9cf673e7a\",\"port_warnings\":[],\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"vnc_port\":\"5999\"}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:40.548Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                                - - "1655896116401379000"
                                  - "{\"message\":{\"request\":{\"url\":\"/resources/vm/configs/demo-logs\",\"method\":\"GET\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"390\",\"etag\":\"W/\\\"186-8FBclVxmCIQtI+usSZ6+oaV8X+8\\\"\"},\"body\":{\"message\":\"\",\"help\":{},\"errors\":[],\"configs\":[{\"owner\":\"{{email}}\",\"orka_vm_name\":\"demo-logs\",\"orka_base_image\":\"90GBigSurSSH.img\",\"orka_cpu_core\":3,\"vcpu_count\":3,\"iso_image\":\"None\",\"attached_disk\":\"None\",\"vnc_console\":true,\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"system_serial\":\"N/A\",\"tag\":\"\",\"tag_required\":false,\"scheduler\":\"default\",\"memory\":\"automatic\"}]}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:36.399Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                                - - "1655896116401334000"
                                  - "{\"message\":{\"request\":{\"url\":\"/resources/vm/configs/demo-logs\",\"method\":\"GET\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"390\",\"etag\":\"W/\\\"186-8FBclVxmCIQtI+usSZ6+oaV8X+8\\\"\"},\"body\":{\"message\":\"\",\"help\":{},\"errors\":[],\"configs\":[{\"owner\":\"{{email}}\",\"orka_vm_name\":\"demo-logs\",\"orka_base_image\":\"90GBigSurSSH.img\",\"orka_cpu_core\":3,\"vcpu_count\":3,\"iso_image\":\"None\",\"attached_disk\":\"None\",\"vnc_console\":true,\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"system_serial\":\"N/A\",\"tag\":\"\",\"tag_required\":false,\"scheduler\":\"default\",\"memory\":\"automatic\"}]}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:36.399Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                        example:
                          - stream:
                              log_type: user_logs
                              service: orka-logs
                            values:
                              - - "1655896120552266000"
                                - "{\"message\":{\"request\":{\"url\":\"/resources/vm/deploy\",\"method\":\"POST\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"content-type\":\"application/json\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"content-length\":\"114\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{\"orka_vm_name\":\"demo-logs\",\"replicas\":1,\"vnc_console\":true,\"tag\":\"\",\"tag_required\":false,\"gpu_passthrough\":false}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"921\",\"etag\":\"W/\\\"399-8ZKOtDk1phgqtHqhYO8LdCBfHr0\\\"\"},\"body\":{\"message\":\"Successfully deployed VM\",\"help\":{\"start_virtual_machine\":\"To start a VM send rest request to http://{{domain}}/resources/vm/exec/start\",\"stop_virtual_machine\":\"To stop a VM send rest request to http://{{domain}}/resources/vm/exec/stop\",\"resume_virtual_machine\":\"To resume a VM send rest request to http://{{domain}}/resources/vm/exec/resume\",\"suspend_virtual_machine\":\"To suspend a VM send rest request to http://{{domain}}/resources/vm/exec/suspend\",\"data_for_virtual_machine_exec_tasks\":{\"orka_vm_name\":\"demo-logs\",\"orka_node_name\":\"mini-1\"},\"virtual_machine_vnc\":\"Once started and deployed, you can use VNC to access it via {{vmIP}}:5999\"},\"errors\":[],\"ram\":\"16.00G\",\"vcpu\":\"3\",\"host_cpu\":\"3\",\"ip\":\"{{vmIP}}\",\"ssh_port\":\"8822\",\"screen_share_port\":\"5900\",\"vm_id\":\"84ac9cf673e7a\",\"port_warnings\":[],\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"vnc_port\":\"5999\"}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:40.548Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                              - - "1655896116401379000"
                                - "{\"message\":{\"request\":{\"url\":\"/resources/vm/configs/demo-logs\",\"method\":\"GET\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"390\",\"etag\":\"W/\\\"186-8FBclVxmCIQtI+usSZ6+oaV8X+8\\\"\"},\"body\":{\"message\":\"\",\"help\":{},\"errors\":[],\"configs\":[{\"owner\":\"{{email}}\",\"orka_vm_name\":\"demo-logs\",\"orka_base_image\":\"90GBigSurSSH.img\",\"orka_cpu_core\":3,\"vcpu_count\":3,\"iso_image\":\"None\",\"attached_disk\":\"None\",\"vnc_console\":true,\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"system_serial\":\"N/A\",\"tag\":\"\",\"tag_required\":false,\"scheduler\":\"default\",\"memory\":\"automatic\"}]}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:36.399Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                              - - "1655896116401334000"
                                - "{\"message\":{\"request\":{\"url\":\"/resources/vm/configs/demo-logs\",\"method\":\"GET\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"390\",\"etag\":\"W/\\\"186-8FBclVxmCIQtI+usSZ6+oaV8X+8\\\"\"},\"body\":{\"message\":\"\",\"help\":{},\"errors\":[],\"configs\":[{\"owner\":\"{{email}}\",\"orka_vm_name\":\"demo-logs\",\"orka_base_image\":\"90GBigSurSSH.img\",\"orka_cpu_core\":3,\"vcpu_count\":3,\"iso_image\":\"None\",\"attached_disk\":\"None\",\"vnc_console\":true,\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"system_serial\":\"N/A\",\"tag\":\"\",\"tag_required\":false,\"scheduler\":\"default\",\"memory\":\"automatic\"}]}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:36.399Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                      resultType:
                        type: string
                        example: streams
                      stats:
                        type: object
                        properties:
                          ingester:
                            type: object
                            properties:
                              compressedBytes:
                                type: number
                                example: 48978
                              decompressedBytes:
                                type: number
                                example: 661249
                              decompressedLines:
                                type: number
                                example: 487
                              headChunkBytes:
                                type: number
                                example: 14691
                              headChunkLines:
                                type: number
                                example: 15
                              totalBatches:
                                type: number
                                example: 1
                              totalChunksMatched:
                                type: number
                                example: 1
                              totalDuplicates:
                                type: number
                                example: 0
                              totalLinesSent:
                                type: number
                                example: 3
                              totalReached:
                                type: number
                                example: 16
                          store:
                            type: object
                            properties:
                              chunksDownloadTime:
                                type: number
                                example: 0
                              compressedBytes:
                                type: number
                                example: 0
                              decompressedBytes:
                                type: number
                                example: 0
                              decompressedLines:
                                type: number
                                example: 0
                              headChunkBytes:
                                type: number
                                example: 0
                              headChunkLines:
                                type: number
                                example: 0
                              totalChunksDownloaded:
                                type: number
                                example: 0
                              totalChunksRef:
                                type: number
                                example: 0
                              totalDuplicates:
                                type: number
                                example: 0
                          summary:
                            type: object
                            properties:
                              bytesProcessedPerSecond:
                                type: number
                                example: 8358710
                              execTime:
                                type: number
                                example: 0.080866544
                              linesProcessedPerSecond:
                                type: number
                                example: 6207
                              totalBytesProcessed:
                                type: number
                                example: 675940
                              totalLinesProcessed:
                                type: number
                                example: 502
                  status:
                    type: string
                    example: success
              examples:
                Filter logs by string:
                  value:
                    data:
                      result:
                        - stream:
                            log_type: user_logs
                            service: orka-logs
                          values:
                            - - "1655896120552266000"
                              - "{\"message\":{\"request\":{\"url\":\"/resources/vm/deploy\",\"method\":\"POST\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"content-type\":\"application/json\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"content-length\":\"114\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{\"orka_vm_name\":\"demo-logs\",\"replicas\":1,\"vnc_console\":true,\"tag\":\"\",\"tag_required\":false,\"gpu_passthrough\":false}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"921\",\"etag\":\"W/\\\"399-8ZKOtDk1phgqtHqhYO8LdCBfHr0\\\"\"},\"body\":{\"message\":\"Successfully deployed VM\",\"help\":{\"start_virtual_machine\":\"To start a VM send rest request to http://{{domain}}/resources/vm/exec/start\",\"stop_virtual_machine\":\"To stop a VM send rest request to http://{{domain}}/resources/vm/exec/stop\",\"resume_virtual_machine\":\"To resume a VM send rest request to http://{{domain}}/resources/vm/exec/resume\",\"suspend_virtual_machine\":\"To suspend a VM send rest request to http://{{domain}}/resources/vm/exec/suspend\",\"data_for_virtual_machine_exec_tasks\":{\"orka_vm_name\":\"demo-logs\",\"orka_node_name\":\"mini-1\"},\"virtual_machine_vnc\":\"Once started and deployed, you can use VNC to access it via {{vmIP}}:5999\"},\"errors\":[],\"ram\":\"16.00G\",\"vcpu\":\"3\",\"host_cpu\":\"3\",\"ip\":\"{{vmIP}}\",\"ssh_port\":\"8822\",\"screen_share_port\":\"5900\",\"vm_id\":\"84ac9cf673e7a\",\"port_warnings\":[],\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"vnc_port\":\"5999\"}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:40.548Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                            - - "1655896116401379000"
                              - "{\"message\":{\"request\":{\"url\":\"/resources/vm/configs/demo-logs\",\"method\":\"GET\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"390\",\"etag\":\"W/\\\"186-8FBclVxmCIQtI+usSZ6+oaV8X+8\\\"\"},\"body\":{\"message\":\"\",\"help\":{},\"errors\":[],\"configs\":[{\"owner\":\"{{email}}\",\"orka_vm_name\":\"demo-logs\",\"orka_base_image\":\"90GBigSurSSH.img\",\"orka_cpu_core\":3,\"vcpu_count\":3,\"iso_image\":\"None\",\"attached_disk\":\"None\",\"vnc_console\":true,\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"system_serial\":\"N/A\",\"tag\":\"\",\"tag_required\":false,\"scheduler\":\"default\",\"memory\":\"automatic\"}]}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:36.399Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                            - - "1655896116401334000"
                              - "{\"message\":{\"request\":{\"url\":\"/resources/vm/configs/demo-logs\",\"method\":\"GET\",\"headers\":{\"accept\":\"application/json, text/plain, */*\",\"user-agent\":\"orka-cli\",\"x-cli-version\":\"2.1.0\",\"platform\":\"darwin\",\"release\":\"21.1.0\",\"host\":\"{{host}}\",\"connection\":\"close\"},\"body\":{}},\"response\":{\"statusCode\":200,\"headers\":{\"access-control-allow-origin\":\"*\",\"content-type\":\"application/json; charset=utf-8\",\"content-length\":\"390\",\"etag\":\"W/\\\"186-8FBclVxmCIQtI+usSZ6+oaV8X+8\\\"\"},\"body\":{\"message\":\"\",\"help\":{},\"errors\":[],\"configs\":[{\"owner\":\"{{email}}\",\"orka_vm_name\":\"demo-logs\",\"orka_base_image\":\"90GBigSurSSH.img\",\"orka_cpu_core\":3,\"vcpu_count\":3,\"iso_image\":\"None\",\"attached_disk\":\"None\",\"vnc_console\":true,\"io_boost\":true,\"use_saved_state\":false,\"gpu_passthrough\":false,\"system_serial\":\"N/A\",\"tag\":\"\",\"tag_required\":false,\"scheduler\":\"default\",\"memory\":\"automatic\"}]}},\"user\":{\"email\":\"{{email}}\",\"id\":\"dc440e6e-eacd-4a84-8800-cd153b4a5b58\"},\"createdAt\":\"2022-06-22T11:08:36.399Z\",\"level\":\"info\",\"logVersion\":\"2.0\"}}"
                      resultType: streams
                      stats:
                        ingester:
                          compressedBytes: 48978
                          decompressedBytes: 661249
                          decompressedLines: 487
                          headChunkBytes: 14691
                          headChunkLines: 15
                          totalBatches: 1
                          totalChunksMatched: 1
                          totalDuplicates: 0
                          totalLinesSent: 3
                          totalReached: 16
                        store:
                          chunksDownloadTime: 0
                          compressedBytes: 0
                          decompressedBytes: 0
                          decompressedLines: 0
                          headChunkBytes: 0
                          headChunkLines: 0
                          totalChunksDownloaded: 0
                          totalChunksRef: 0
                          totalDuplicates: 0
                        summary:
                          bytesProcessedPerSecond: 8358710
                          execTime: 0.080866544
                          linesProcessedPerSecond: 6207
                          totalBytesProcessed: 675940
                          totalLinesProcessed: 502
                    status: success
  "/resources/image/checksum/{baseImage}":
    get:
      tags:
        - Images
      summary: Calculate image checksum
      description: "> **NOTE**: This request is supported for Intel images only. Intel images have `.img` extension.\n\nRequest the MD5 file checksum for a base image in Orka cluster storage. The checksum can be used to verify file integrity for a downloaded or uploaded image. A `202` status code will be returned while the calculation is in progress and has not completed. A `404` status code will be returned if the image is not found.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: calculateImageChecksum
      responses:
        "200":
          description: Calculate image checksum
          content:
            application/json:
              schema:
                type: object
                properties:
                  checksum:
                    type: string
                    example: 1d1b1e8fa44aa6c6d9b26502305cc28e
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  image:
                    type: string
                    example: "{{baseImage}}"
                  message:
                    type: string
                    example: ""
              examples:
                Calculate image checksum:
                  value:
                    checksum: 1d1b1e8fa44aa6c6d9b26502305cc28e
                    errors: []
                    help: {}
                    image: "{{baseImage}}"
                    message: ""
        "202":
          description: Calculation in progress
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: "calculating checksum for image '{{baseImage}}'"
              examples:
                Calculation in progress:
                  value:
                    errors: []
                    help: {}
                    message: "calculating checksum for image '{{baseImage}}'"
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "image '{{baseImage}}' not found"
                    example:
                      - message: "image '{{baseImage}}' not found"
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Image not found:
                  value:
                    errors:
                      - message: "image '{{baseImage}}' not found"
                    help: {}
                    message: ""
    parameters:
      - name: baseImage
        in: path
        required: true
        schema:
          type: string
  /resources/image/commit:
    post:
      tags:
        - Images
      summary: Commit changes to the base image
      description: "Apply the current state of a VM's image to the original base image in the Orka storage. Use this operation to modify an existing base image. All VM configs that reference this base image will be affected.\n\nYou must specify the VM by ID. The VM must be deployed. The VM must be non-scaled. The base image to which you want to commit changes must be in use by only one VM. The base image to which you want to commit changes must not be in use by a VM configuration with saved VM state.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: commitChangesToTheBaseImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: Commit changes to base image
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: committed
              examples:
                Commit changes to base image:
                  value:
                    errors: []
                    help: {}
                    message: committed
  /resources/image/copy:
    post:
      tags:
        - Images
      summary: Copy image
      description: "Copy an existing base image.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: copyImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: "{{baseImage}}"
                new_name:
                  type: string
                  example: "{{newBaseImage}}"
            example:
              image: "{{baseImage}}"
              new_name: "{{newBaseImage}}"
      responses:
        "200":
          description: Copy image
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully copied
              examples:
                Copy image:
                  value:
                    errors: []
                    help: {}
                    message: Successfully copied
  /resources/image/delete:
    post:
      tags:
        - Images
      summary: Delete image
      description: "Delete the specified image from the local Orka storage.\n\n> **CAUTION:** Make sure that the image is not in use.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: deleteImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: "{{baseImage}}"
            example:
              image: "{{baseImage}}"
      responses:
        "200":
          description: Delete image
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: "Successfully deleted: {{baseImage}}"
              examples:
                Delete image:
                  value:
                    errors: []
                    help: {}
                    message: "Successfully deleted: {{baseImage}}"
  "/resources/image/download/{baseImage}":
    get:
      tags:
        - Images
      summary: Download an image
      description: "> **NOTE**: This request is supported for Intel images only. Intel images have `.img` extension.\n\nDownload an image from Orka cluster storage to your local filesystem. A `404` status code will be returned if the image is not found.\n\n> NOTE: use the `--remote-name` or `--output` flags with curl to download an image.\n\nThe response will include the `Content-Disposition: attachment; filename=`,  \n`Content-Type: application/octet-stream` and  \n`Content-Length:` headers. See the response headers in the example.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: downloadAnImage
      responses:
        "200":
          description: Download an image
          headers:
            Content-Disposition:
              schema:
                type: string
                example: "attachment; filename={{baseImage}}"
            Content-Length:
              schema:
                type: string
                example: "29815144448"
          content: {}
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "image file not found: {{baseImage}}"
                    example:
                      - message: "image file not found: {{baseImage}}"
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Image not found:
                  value:
                    errors:
                      - message: "image file not found: {{baseImage}}"
                    help: {}
                    message: ""
    parameters:
      - name: baseImage
        in: path
        required: true
        schema:
          type: string
  /resources/image/generate:
    post:
      tags:
        - Images
      summary: Generate empty storage
      description: "> **NOTE**: This request is supported for Intel images only. Intel images have `.img` extension.\n\nGenerate an empty base image. You can use it to create VM configurations that will use an ISO or you can attach it to a deployed VM to extend its storage. You can specify size (in K, M, G, or T) and name for the new storage.\n\n> **NOTE:** The size limit for the storage depends on your plan and any base images and ISOs in your Orka storage. For more information, [contact us](https://portal.macstadium.com).  \n> **NOTE:** Orka lists generated empty storage disks with a fixed size of \\~192k. When attached to a VM and formatted, the disk will appear with its correct size in the VM.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: generateEmptyStorage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_name:
                  type: string
                  example: "{{storageImage}}"
                file_size:
                  type: string
                  example: 10G
            example:
              file_name: "{{storageImage}}"
              file_size: 10G
      responses:
        "200":
          description: Generate empty storage
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully generated image
              examples:
                Generate empty storage:
                  value:
                    errors: []
                    help: {}
                    message: Successfully generated image
  /resources/image/list:
    get:
      tags:
        - Images
      summary: List images
      description: "Retrieve a list of the base images and empty disks in your Orka environment. \n\n> **NOTE:** Orka lists generated empty storage disks with a fixed size of ~192k. When attached to a VM and formatted, the disk will appear with its correct size in the OS.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listImages
      responses:
        "200":
          description: List images
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "237"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:16 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"ed-liVopy+hhGQ7uwgl+ab8EmONtG4\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  image_attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        date_added:
                          type: string
                          example: "2022-01-28T15:44:32.156Z"
                        image:
                          type: string
                          example: Monterey.orkasi
                        image_size:
                          type: string
                          example: 90G
                        modified:
                          type: string
                          example: "2022-02-10T10:54:28.842Z"
                        owner:
                          type: string
                          example: all
                    example:
                      - date_added: "2022-01-28T15:44:32.156Z"
                        image: Monterey.orkasi
                        image_size: 90G
                        modified: "2022-02-10T10:54:28.842Z"
                        owner: all
                      - date_added: "2019-11-11T23:03:58.560Z"
                        image: Mojave-Clean.img
                        image_size: 17G
                        modified: "2019-09-16T14:49:48.088Z"
                        owner: all
                      - date_added: "2019-11-11T23:03:58.564Z"
                        image: Mojave-Jenkins.img
                        image_size: 17G
                        modified: "2019-08-11T06:09:56.821Z"
                        owner: all
                      - date_added: "2019-11-11T23:03:58.567Z"
                        image: Mojave.img
                        image_size: 17G
                        modified: "2019-08-14T14:25:44.282Z"
                        owner: all
                      - date_added: "2019-11-22T10:37:50.154Z"
                        image: empty.img
                        image_size: 193k
                        modified: "2019-11-22T10:37:49.000Z"
                        owner: all
                  images:
                    type: array
                    items:
                      type: string
                      example: Monterey.orkasi
                    example:
                      - Monterey.orkasi
                      - Mojave-Clean.img
                      - Mojave-Jenkins.img
                      - Mojave.img
                      - empty.img
                  message:
                    type: string
                    example: ""
              examples:
                List images:
                  value:
                    errors: []
                    help: {}
                    image_attributes:
                      - date_added: "2022-01-28T15:44:32.156Z"
                        image: Monterey.orkasi
                        image_size: 90G
                        modified: "2022-02-10T10:54:28.842Z"
                        owner: all
                      - date_added: "2019-11-11T23:03:58.560Z"
                        image: Mojave-Clean.img
                        image_size: 17G
                        modified: "2019-09-16T14:49:48.088Z"
                        owner: all
                      - date_added: "2019-11-11T23:03:58.564Z"
                        image: Mojave-Jenkins.img
                        image_size: 17G
                        modified: "2019-08-11T06:09:56.821Z"
                        owner: all
                      - date_added: "2019-11-11T23:03:58.567Z"
                        image: Mojave.img
                        image_size: 17G
                        modified: "2019-08-14T14:25:44.282Z"
                        owner: all
                      - date_added: "2019-11-22T10:37:50.154Z"
                        image: empty.img
                        image_size: 193k
                        modified: "2019-11-22T10:37:49.000Z"
                        owner: all
                    images:
                      - Monterey.orkasi
                      - Mojave-Clean.img
                      - Mojave-Jenkins.img
                      - Mojave.img
                      - empty.img
                    message: ""
  /resources/image/list-remote:
    get:
      tags:
        - Images
      summary: List remote images
      description: "List the base images available in the Orka remote repo.\n\nTo use one of the images from the remote repo, you can `pull` it into the local Orka storage.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listRemoteImages
      responses:
        "200":
          description: List remote images
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "237"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:16 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"ed-liVopy+hhGQ7uwgl+ab8EmONtG4\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  images:
                    type: array
                    items:
                      type: string
                      example: Monterey.orkasi
                    example:
                      - Monterey.orkasi
                      - Mojave-Clean.img
                      - Test.img
                  message:
                    type: string
                    example: ""
              examples:
                List remote images:
                  value:
                    errors: []
                    help: {}
                    images:
                      - Monterey.orkasi
                      - Mojave-Clean.img
                      - Test.img
                    message: ""
  /resources/image/pull:
    post:
      tags:
        - Images
      summary: Pull image
      description: "Pull a base image from the remote repo. This is a long-running operation and might take a while.\n\nThe operation copies the image to the local storage of your Orka environment. The base image will be available for use by all users of the environment.\n\nTo see the available images in the remote repo, use `list remote images`.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: pullImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: "{{baseImage}}"
                new_name:
                  type: string
                  example: "{{newBaseImage}}"
            example:
              image: "{{baseImage}}"
              new_name: "{{newBaseImage}}"
      responses:
        "200":
          description: Pull image and rename
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully copied image.
              examples:
                Pull image and rename:
                  value:
                    errors: []
                    help: {}
                    message: Successfully copied image.
  /resources/image/rename:
    post:
      tags:
        - Images
      summary: Rename image
      description: "Rename the specified base image.\n\n> **CAUTION:** After you rename a base image, you can no longer deploy any VM configurations that are based on the image of the old name.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: renameImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: "{{baseImage}}"
                new_name:
                  type: string
                  example: "{{newBaseImage}}"
            example:
              image: "{{baseImage}}"
              new_name: "{{newBaseImage}}"
      responses:
        "200":
          description: Rename image
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully rename
              examples:
                Rename image:
                  value:
                    errors: []
                    help: {}
                    message: Successfully rename
  /resources/image/resize:
    post:
      tags:
        - Images
      summary: Resize image
      description: "> **NOTE**: This request is supported for Intel images only. Intel images have `.img` extension.\n\nResize the current disk of a deployed VM and save it as a new base image. This does not affect the original base image of the VM.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: resizeImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_image_name:
                  type: string
                  example: "{{newBaseImage}}"
                new_image_size:
                  type: string
                  example: 100G
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
                vm_password:
                  type: string
                  example: admin
                vm_username:
                  type: string
                  example: admin
            example:
              new_image_name: "{{newBaseImage}}"
              new_image_size: 100G
              orka_vm_name: "{{vmID}}"
              vm_password: admin
              vm_username: admin
      responses:
        "200":
          description: Resize image and save the new base manually
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        channel:
                          type: string
                          example: stdout
                        message:
                          type: string
                          example: "Shutting down vm ...\n"
                    example:
                      - channel: stdout
                        message: "Shutting down vm ...\n"
                      - channel: stdout
                        message: "Domain macos destroyed\n\n"
                      - channel: stdout
                        message: "Resizing image ...\n"
                      - channel: stdout
                        message: "Image resized.\n"
                      - channel: stdout
                        message: "Domain macos started\n\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stderr
                        message: "ssh: connect to host 192.168.122.2 port 22: No route to host\r\n"
                      - channel: stdout
                        message: "9 retries remaining\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stderr
                        message: "ssh: connect to host 192.168.122.2 port 22: No route to host\r\n"
                      - channel: stdout
                        message: "8 retries remaining\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stderr
                        message: "ssh: connect to host 192.168.122.2 port 22: No route to host\r\n"
                      - channel: stdout
                        message: "7 retries remaining\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stdout
                        message: "ok\n"
                      - channel: stderr
                        message: "++ mktemp\n"
                      - channel: stderr
                        message: "+ DISK_LIST=/var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stderr
                        message: "+ diskutil list\n"
                      - channel: stderr
                        message: "+ force_ascii\n+ tr -d '\\200-\\277\\300-\\377'\n"
                      - channel: stderr
                        message: "+ tee /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stdout
                        message: "/dev/disk0 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *268.4 MB   disk0\n   1:                        EFI EFI                     101.4 MB   disk0s1\n   2:           Linux Filesystem                         163.9 MB   disk0s2\n\n/dev/disk1 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *139.6 GB   disk1\n   1:                        EFI EFI                     209.7 MB   disk1s1\n   2:                 Apple_APFS Container disk2         107.2 GB   disk1s2\n\n/dev/disk2 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +107.2 GB   disk2\n                                 Physical Store disk1s2\n   1:                APFS Volume Macintosh HD - Data     22.9 GB    disk2s1\n   2:                APFS Volume Preboot                 83.3 MB    disk2s2\n   3:                APFS Volume Recovery                523.5 MB   disk2s3\n   4:                APFS Volume VM                      1.1 GB     disk2s4\n   5:                APFS Volume Macintosh HD            10.8 GB    disk2s5\n\n"
                      - channel: stderr
                        message: "++ mktemp\n"
                      - channel: stderr
                        message: "+ DISK_INFO=/var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stderr
                        message: "+ diskutil info /\n"
                      - channel: stderr
                        message: "+ force_ascii\n"
                      - channel: stderr
                        message: "+ tr -d '\\200-\\277\\300-\\377'\n"
                      - channel: stderr
                        message: "+ tee /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stdout
                        message: "   Device Identifier:         disk2s5\n   Device Node:               /dev/disk2s5\n   Whole:                     No\n   Part of Whole:             disk2\n\n   Volume Name:               Macintosh HD\n   Mounted:                   Yes\n   Mount Point:               /\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk2s2\n   Recovery Disk:             disk2s3\n   Media Type:                Generic\n   Protocol:                  SATA\n   SMART Status:              Verified\n   Volume UUID:               DD1F67FC-CD9F-42B5-81F8-46FC9433958C\n   Disk / Partition UUID:     DD1F67FC-CD9F-42B5-81F8-46FC9433958C\n\n   Disk Size:                 107.2 GB (107164426240 Bytes) (exactly 209305520 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     107.2 GB (107164426240 Bytes) (exactly 209305520 512-Byte-Units)\n   Container Free Space:      71.6 GB (71626600448 Bytes) (exactly 139895704 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Read-Only Media:           No\n   Read-Only Volume:          Yes\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               No\n   Hardware AES Support:      No\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk2\n   APFS Physical Store:       disk1s2\n   Fusion Drive:              No\n   APFS Volume Group:         60340407-DC99-4EAC-B7E6-FD19406361FE\n   FileVault:                 No\n   Locked:                    No\n\n"
                      - channel: stderr
                        message: "+ trap 'echo done && rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh && rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu' EXIT\n"
                      - channel: stderr
                        message: "++ grep -i 'type (bundle)' /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stderr
                        message: "++ awk '{print $3}'\n"
                      - channel: stderr
                        message: "+ FS_TYPE=apfs\n"
                      - channel: stderr
                        message: "+ [[ -z apfs ]]\n+ set -u\n"
                      - channel: stderr
                        message: "+ [[ apfs == \\a\\p\\f\\s ]]\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n++ awk '{print $7}'\n"
                      - channel: stderr
                        message: "++ sed 's/^\\(disk[0-9]*\\).*/\\1/'\n"
                      - channel: stderr
                        message: "+ APFS_STORE=disk1\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stderr
                        message: "++ awk '{print $4}'\n"
                      - channel: stderr
                        message: "+ APFS_CONTAINER=disk2\n+ echo '*** repairing partition map ***'\n"
                      - channel: stdout
                        message: "*** repairing partition map ***\n"
                      - channel: stderr
                        message: "+ echo -n y\n"
                      - channel: stderr
                        message: "+ diskutil repairDisk disk1\n"
                      - channel: stdout
                        message: "Repairing the partition map might erase disk1s1, proceed? (y/N) Started partition map repair on disk1\n"
                      - channel: stdout
                        message: "Checking prerequisites\n"
                      - channel: stdout
                        message: "Checking the partition list\n"
                      - channel: stdout
                        message: "Adjusting partition map to fit whole disk as required\n"
                      - channel: stdout
                        message: "Did grow entire partition map\n"
                      - channel: stdout
                        message: "Checking for an EFI system partition\n"
                      - channel: stdout
                        message: "Checking the EFI system partition's size\n"
                      - channel: stdout
                        message: "Checking the EFI system partition's file system\n"
                      - channel: stdout
                        message: "Checking the EFI system partition's folder content\n"
                      - channel: stdout
                        message: "Checking all HFS data partition loader spaces\n"
                      - channel: stdout
                        message: "Checking booter partitions\n"
                      - channel: stdout
                        message: "Reviewing boot support loaders\n"
                      - channel: stdout
                        message: "Checking Core Storage Physical Volume partitions\n"
                      - channel: stdout
                        message: "The partition map appears to be OK\n"
                      - channel: stdout
                        message: "Finished partition map repair on disk1\n"
                      - channel: stdout
                        message: "*** resizing apfs container ***\n"
                      - channel: stderr
                        message: "+ echo '*** resizing apfs container ***'\n+ diskutil apfs resizeContainer /dev/disk2 0\n"
                      - channel: stdout
                        message: "Started APFS operation\n"
                      - channel: stdout
                        message: "Aligning grow delta to 32,212,254,720 bytes and targeting a new physical store size of 139,376,680,960 bytes\n"
                      - channel: stdout
                        message: "Determined the maximum size for the targeted physical store of this APFS Container to be 139,375,652,864 bytes\n"
                      - channel: stdout
                        message: "Resizing APFS Container designated by APFS Container Reference disk2\n"
                      - channel: stdout
                        message: "The specific APFS Physical Store being resized is disk1s2\n"
                      - channel: stdout
                        message: "Verifying storage system\n"
                      - channel: stdout
                        message: "Using live mode\n"
                      - channel: stdout
                        message: "Performing fsck_apfs -n -x -l -S /dev/disk1s2\n"
                      - channel: stdout
                        message: "Checking the container superblock\n"
                      - channel: stdout
                        message: "Checking the EFI jumpstart record\n"
                      - channel: stdout
                        message: "Checking the space manager\n"
                      - channel: stdout
                        message: "Checking the space manager free queue trees\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Macintosh HD - Data was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Preboot was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Recovery was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume VM was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Macintosh HD was formatted by diskmanagementd (1412.81.1) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Verifying allocated space\n"
                      - channel: stdout
                        message: "The volume /dev/disk1s2 appears to be OK\n"
                      - channel: stdout
                        message: "Storage system check exit code is 0\n"
                      - channel: stdout
                        message: "Growing APFS Physical Store disk1s2 from 107,164,426,240 to 139,376,680,960 bytes\n"
                      - channel: stdout
                        message: "Modifying partition map\n"
                      - channel: stdout
                        message: "Growing APFS data structures\n"
                      - channel: stdout
                        message: "Finished APFS operation\n"
                      - channel: stderr
                        message: "+ diskutil list\n"
                      - channel: stdout
                        message: "/dev/disk0 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *268.4 MB   disk0\n   1:                        EFI EFI                     101.4 MB   disk0s1\n   2:           Linux Filesystem                         163.9 MB   disk0s2\n\n/dev/disk1 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *139.6 GB   disk1\n   1:                        EFI EFI                     209.7 MB   disk1s1\n   2:                 Apple_APFS Container disk2         139.4 GB   disk1s2\n\n/dev/disk2 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +139.4 GB   disk2\n                                 Physical Store disk1s2\n   1:                APFS Volume Macintosh HD - Data     22.9 GB    disk2s1\n   2:                APFS Volume Preboot                 83.3 MB    disk2s2\n   3:                APFS Volume Recovery                523.5 MB   disk2s3\n   4:                APFS Volume VM                      1.1 GB     disk2s4\n   5:                APFS Volume Macintosh HD            10.8 GB    disk2s5\n\n"
                      - channel: stderr
                        message: "+ set +e\n"
                      - channel: stderr
                        message: "+ diff /dev/fd/63 /dev/fd/62\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stderr
                        message: "++ diskutil list\n++ awk '{print $5 $6}'\n++ force_ascii\n++ tr -d '\\200-\\277\\300-\\377'\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs\n++ awk '{print $5 $6}'\n"
                      - channel: stdout
                        message: "1c1\n< 107.2GB\n---\n> 139.4GB\n"
                      - channel: stderr
                        message: "+ [[ 1 -eq 0 ]]\n+ echo done\n"
                      - channel: stdout
                        message: "done\n"
                      - channel: stderr
                        message: "+ rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stderr
                        message: "+ rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stdout
                        message: "No image saved\n"
                  message:
                    type: string
                    example: Successfully resized image to 100G. The image was not saved and will not persist across future deployments or revert operations. You can save or commit the image manually.
              examples:
                Resize image and save the new base manually:
                  value:
                    errors: []
                    help: {}
                    logs:
                      - channel: stdout
                        message: "Shutting down vm ...\n"
                      - channel: stdout
                        message: "Domain macos destroyed\n\n"
                      - channel: stdout
                        message: "Resizing image ...\n"
                      - channel: stdout
                        message: "Image resized.\n"
                      - channel: stdout
                        message: "Domain macos started\n\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stderr
                        message: "ssh: connect to host 192.168.122.2 port 22: No route to host\r\n"
                      - channel: stdout
                        message: "9 retries remaining\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stderr
                        message: "ssh: connect to host 192.168.122.2 port 22: No route to host\r\n"
                      - channel: stdout
                        message: "8 retries remaining\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stderr
                        message: "ssh: connect to host 192.168.122.2 port 22: No route to host\r\n"
                      - channel: stdout
                        message: "7 retries remaining\n"
                      - channel: stdout
                        message: "Waiting for ssh access ...\n"
                      - channel: stdout
                        message: "ok\n"
                      - channel: stderr
                        message: "++ mktemp\n"
                      - channel: stderr
                        message: "+ DISK_LIST=/var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stderr
                        message: "+ diskutil list\n"
                      - channel: stderr
                        message: "+ force_ascii\n+ tr -d '\\200-\\277\\300-\\377'\n"
                      - channel: stderr
                        message: "+ tee /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stdout
                        message: "/dev/disk0 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *268.4 MB   disk0\n   1:                        EFI EFI                     101.4 MB   disk0s1\n   2:           Linux Filesystem                         163.9 MB   disk0s2\n\n/dev/disk1 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *139.6 GB   disk1\n   1:                        EFI EFI                     209.7 MB   disk1s1\n   2:                 Apple_APFS Container disk2         107.2 GB   disk1s2\n\n/dev/disk2 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +107.2 GB   disk2\n                                 Physical Store disk1s2\n   1:                APFS Volume Macintosh HD - Data     22.9 GB    disk2s1\n   2:                APFS Volume Preboot                 83.3 MB    disk2s2\n   3:                APFS Volume Recovery                523.5 MB   disk2s3\n   4:                APFS Volume VM                      1.1 GB     disk2s4\n   5:                APFS Volume Macintosh HD            10.8 GB    disk2s5\n\n"
                      - channel: stderr
                        message: "++ mktemp\n"
                      - channel: stderr
                        message: "+ DISK_INFO=/var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stderr
                        message: "+ diskutil info /\n"
                      - channel: stderr
                        message: "+ force_ascii\n"
                      - channel: stderr
                        message: "+ tr -d '\\200-\\277\\300-\\377'\n"
                      - channel: stderr
                        message: "+ tee /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stdout
                        message: "   Device Identifier:         disk2s5\n   Device Node:               /dev/disk2s5\n   Whole:                     No\n   Part of Whole:             disk2\n\n   Volume Name:               Macintosh HD\n   Mounted:                   Yes\n   Mount Point:               /\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk2s2\n   Recovery Disk:             disk2s3\n   Media Type:                Generic\n   Protocol:                  SATA\n   SMART Status:              Verified\n   Volume UUID:               DD1F67FC-CD9F-42B5-81F8-46FC9433958C\n   Disk / Partition UUID:     DD1F67FC-CD9F-42B5-81F8-46FC9433958C\n\n   Disk Size:                 107.2 GB (107164426240 Bytes) (exactly 209305520 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     107.2 GB (107164426240 Bytes) (exactly 209305520 512-Byte-Units)\n   Container Free Space:      71.6 GB (71626600448 Bytes) (exactly 139895704 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Read-Only Media:           No\n   Read-Only Volume:          Yes\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               No\n   Hardware AES Support:      No\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk2\n   APFS Physical Store:       disk1s2\n   Fusion Drive:              No\n   APFS Volume Group:         60340407-DC99-4EAC-B7E6-FD19406361FE\n   FileVault:                 No\n   Locked:                    No\n\n"
                      - channel: stderr
                        message: "+ trap 'echo done && rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh && rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu' EXIT\n"
                      - channel: stderr
                        message: "++ grep -i 'type (bundle)' /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stderr
                        message: "++ awk '{print $3}'\n"
                      - channel: stderr
                        message: "+ FS_TYPE=apfs\n"
                      - channel: stderr
                        message: "+ [[ -z apfs ]]\n+ set -u\n"
                      - channel: stderr
                        message: "+ [[ apfs == \\a\\p\\f\\s ]]\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n++ awk '{print $7}'\n"
                      - channel: stderr
                        message: "++ sed 's/^\\(disk[0-9]*\\).*/\\1/'\n"
                      - channel: stderr
                        message: "+ APFS_STORE=disk1\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stderr
                        message: "++ awk '{print $4}'\n"
                      - channel: stderr
                        message: "+ APFS_CONTAINER=disk2\n+ echo '*** repairing partition map ***'\n"
                      - channel: stdout
                        message: "*** repairing partition map ***\n"
                      - channel: stderr
                        message: "+ echo -n y\n"
                      - channel: stderr
                        message: "+ diskutil repairDisk disk1\n"
                      - channel: stdout
                        message: "Repairing the partition map might erase disk1s1, proceed? (y/N) Started partition map repair on disk1\n"
                      - channel: stdout
                        message: "Checking prerequisites\n"
                      - channel: stdout
                        message: "Checking the partition list\n"
                      - channel: stdout
                        message: "Adjusting partition map to fit whole disk as required\n"
                      - channel: stdout
                        message: "Did grow entire partition map\n"
                      - channel: stdout
                        message: "Checking for an EFI system partition\n"
                      - channel: stdout
                        message: "Checking the EFI system partition's size\n"
                      - channel: stdout
                        message: "Checking the EFI system partition's file system\n"
                      - channel: stdout
                        message: "Checking the EFI system partition's folder content\n"
                      - channel: stdout
                        message: "Checking all HFS data partition loader spaces\n"
                      - channel: stdout
                        message: "Checking booter partitions\n"
                      - channel: stdout
                        message: "Reviewing boot support loaders\n"
                      - channel: stdout
                        message: "Checking Core Storage Physical Volume partitions\n"
                      - channel: stdout
                        message: "The partition map appears to be OK\n"
                      - channel: stdout
                        message: "Finished partition map repair on disk1\n"
                      - channel: stdout
                        message: "*** resizing apfs container ***\n"
                      - channel: stderr
                        message: "+ echo '*** resizing apfs container ***'\n+ diskutil apfs resizeContainer /dev/disk2 0\n"
                      - channel: stdout
                        message: "Started APFS operation\n"
                      - channel: stdout
                        message: "Aligning grow delta to 32,212,254,720 bytes and targeting a new physical store size of 139,376,680,960 bytes\n"
                      - channel: stdout
                        message: "Determined the maximum size for the targeted physical store of this APFS Container to be 139,375,652,864 bytes\n"
                      - channel: stdout
                        message: "Resizing APFS Container designated by APFS Container Reference disk2\n"
                      - channel: stdout
                        message: "The specific APFS Physical Store being resized is disk1s2\n"
                      - channel: stdout
                        message: "Verifying storage system\n"
                      - channel: stdout
                        message: "Using live mode\n"
                      - channel: stdout
                        message: "Performing fsck_apfs -n -x -l -S /dev/disk1s2\n"
                      - channel: stdout
                        message: "Checking the container superblock\n"
                      - channel: stdout
                        message: "Checking the EFI jumpstart record\n"
                      - channel: stdout
                        message: "Checking the space manager\n"
                      - channel: stdout
                        message: "Checking the space manager free queue trees\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Macintosh HD - Data was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Preboot was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Recovery was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume VM was formatted by diskmanagementd (1412.11.7) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Checking volume\n"
                      - channel: stdout
                        message: "Checking the APFS volume superblock\n"
                      - channel: stdout
                        message: "The volume Macintosh HD was formatted by diskmanagementd (1412.81.1) and last modified by apfs_kext (1412.81.1)\n"
                      - channel: stdout
                        message: "Checking the object map\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata tree\n"
                      - channel: stdout
                        message: "Checking the snapshot metadata\n"
                      - channel: stdout
                        message: "Checking the extent ref tree\n"
                      - channel: stdout
                        message: "Checking the fsroot tree\n"
                      - channel: stdout
                        message: "Verifying allocated space\n"
                      - channel: stdout
                        message: "The volume /dev/disk1s2 appears to be OK\n"
                      - channel: stdout
                        message: "Storage system check exit code is 0\n"
                      - channel: stdout
                        message: "Growing APFS Physical Store disk1s2 from 107,164,426,240 to 139,376,680,960 bytes\n"
                      - channel: stdout
                        message: "Modifying partition map\n"
                      - channel: stdout
                        message: "Growing APFS data structures\n"
                      - channel: stdout
                        message: "Finished APFS operation\n"
                      - channel: stderr
                        message: "+ diskutil list\n"
                      - channel: stdout
                        message: "/dev/disk0 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *268.4 MB   disk0\n   1:                        EFI EFI                     101.4 MB   disk0s1\n   2:           Linux Filesystem                         163.9 MB   disk0s2\n\n/dev/disk1 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *139.6 GB   disk1\n   1:                        EFI EFI                     209.7 MB   disk1s1\n   2:                 Apple_APFS Container disk2         139.4 GB   disk1s2\n\n/dev/disk2 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +139.4 GB   disk2\n                                 Physical Store disk1s2\n   1:                APFS Volume Macintosh HD - Data     22.9 GB    disk2s1\n   2:                APFS Volume Preboot                 83.3 MB    disk2s2\n   3:                APFS Volume Recovery                523.5 MB   disk2s3\n   4:                APFS Volume VM                      1.1 GB     disk2s4\n   5:                APFS Volume Macintosh HD            10.8 GB    disk2s5\n\n"
                      - channel: stderr
                        message: "+ set +e\n"
                      - channel: stderr
                        message: "+ diff /dev/fd/63 /dev/fd/62\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stderr
                        message: "++ diskutil list\n++ awk '{print $5 $6}'\n++ force_ascii\n++ tr -d '\\200-\\277\\300-\\377'\n"
                      - channel: stderr
                        message: "++ grep -i apple_apfs\n++ awk '{print $5 $6}'\n"
                      - channel: stdout
                        message: "1c1\n< 107.2GB\n---\n> 139.4GB\n"
                      - channel: stderr
                        message: "+ [[ 1 -eq 0 ]]\n+ echo done\n"
                      - channel: stdout
                        message: "done\n"
                      - channel: stderr
                        message: "+ rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.W6HcXnDh\n"
                      - channel: stderr
                        message: "+ rm -f /var/folders/cr/2yb1txy91k5b072r94j5cl9w0000gn/T/tmp.l8nkrqLu\n"
                      - channel: stdout
                        message: "No image saved\n"
                    message: Successfully resized image to 100G. The image was not saved and will not persist across future deployments or revert operations. You can save or commit the image manually.
  /resources/image/save:
    post:
      tags:
        - Images
      summary: Save new base image from VM
      description: "Save the current state of a VM's image to a new base image in the Orka storage. Use this operation to create a new base image.\n\nYou must specify the VM by ID. The VM must be deployed. The VM must be non-scaled. The base image name that you specify must not be in use.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: saveNewBaseImageFromVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_name:
                  type: string
                  example: "{{newBaseImage}}"
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              new_name: "{{newBaseImage}}"
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: Save new base image from VM
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: saved
              examples:
                Save new base image from VM:
                  value:
                    errors: []
                    help: {}
                    message: saved
  /resources/image/upload:
    post:
      tags:
        - Images
      summary: Upload an image
      description: "> **NOTE**: This request is supported for Intel images only. Intel images have `.img` extension.\n\nUpload an image to the Orka environment.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the Authorization: Bearer header."
      operationId: uploadAnImage
      requestBody:
        content:
          application/octet-stream: {}
      responses:
        "200":
          description: Upload an image
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "67"
            Date:
              schema:
                type: string
                example: "Mon, 02 Aug 2021 18:21:34 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"43-0SJnknumtk93GXXl5o7b/21Ws1c\""
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: "Successfully uploaded {{image}}"
              examples:
                Upload an image:
                  value:
                    errors: []
                    help: {}
                    message: "Successfully uploaded {{image}}"
  /resources/iso/copy:
    post:
      tags:
        - ISOs
      summary: Copy ISO
      description: "Copy the specified ISO. The ISO must be present in the local Orka storage.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: copyIso
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                iso:
                  type: string
                  example: "{{iso}}"
                new_name:
                  type: string
                  example: "new{{iso}}"
            example:
              iso: "{{iso}}"
              new_name: "new{{iso}}"
      responses:
        "200":
          description: Copy ISO
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully copied.
              examples:
                Copy ISO:
                  value:
                    errors: []
                    help: {}
                    message: Successfully copied.
  /resources/iso/delete:
    post:
      tags:
        - ISOs
      summary: Delete ISO
      description: "Delete the specified ISO from the local Orka storage.\n\n> **CAUTION:** Make sure that the ISO is not in use. Any VMs that have the ISO attached will no longer be able to boot from it.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: deleteIso
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                iso:
                  type: string
                  example: "{{iso}}"
            example:
              iso: "{{iso}}"
      responses:
        "200":
          description: Delete ISO
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully deleted ISO
              examples:
                Delete ISO:
                  value:
                    errors: []
                    help: {}
                    message: Successfully deleted ISO
  /resources/iso/list:
    get:
      tags:
        - ISOs
      summary: List ISOs in local storage
      description: "Retrieve a list of the ISOs available in the local Orka storage.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listIsOsInLocalStorage
      responses:
        "200":
          description: List ISOs in local storage
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  iso_attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        iso:
                          type: string
                          example: Catalina.iso
                        iso_size:
                          type: string
                          example: 2G
                        modified:
                          type: string
                          example: "2019-10-03T02:58:01.206Z"
                    example:
                      - iso: Catalina.iso
                        iso_size: 2G
                        modified: "2019-10-03T02:58:01.206Z"
                      - iso: Mojave-demo.iso
                        iso_size: 2G
                        modified: "2019-11-07T18:04:27.351Z"
                      - iso: Mojave.iso
                        iso_size: 2G
                        modified: "2019-11-07T17:19:37.890Z"
                  isos:
                    type: array
                    items:
                      type: string
                      example: Catalina.iso
                    example:
                      - Catalina.iso
                      - Mojave-demo.iso
                      - Mojave.iso
                  message:
                    type: string
                    example: ""
              examples:
                List ISOs in local storage:
                  value:
                    errors: []
                    help: {}
                    iso_attributes:
                      - iso: Catalina.iso
                        iso_size: 2G
                        modified: "2019-10-03T02:58:01.206Z"
                      - iso: Mojave-demo.iso
                        iso_size: 2G
                        modified: "2019-11-07T18:04:27.351Z"
                      - iso: Mojave.iso
                        iso_size: 2G
                        modified: "2019-11-07T17:19:37.890Z"
                    isos:
                      - Catalina.iso
                      - Mojave-demo.iso
                      - Mojave.iso
                    message: ""
  /resources/iso/list-remote:
    get:
      tags:
        - ISOs
      summary: List remote ISOs
      description: "List the ISOs available in the Orka remote repo.\n\nTo use one of the ISOs from the remote repo, you can `pull` it into the local Orka storage.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listRemoteIsOs
      responses:
        "200":
          description: List remote ISOs
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  isos:
                    type: array
                    items:
                      type: string
                      example: Catalina.iso
                    example:
                      - Catalina.iso
                      - "{{iso}}"
                  message:
                    type: string
                    example: ""
              examples:
                List remote ISOs:
                  value:
                    errors: []
                    help: {}
                    isos:
                      - Catalina.iso
                      - "{{iso}}"
                    message: ""
  /resources/iso/pull:
    post:
      tags:
        - ISOs
      summary: Pull ISO
      description: "Pull an ISO from the remote repo. You can retain the ISO name or change it during the operation. This is a long-running operation and might take a while.\n\nThe operation copies the ISO to the local storage of your Orka environment. The ISO will be available for use by all users of the environment.\n\nTo see the available ISOs in the remote repo, use `list remote ISOs`.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: pullIso
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                iso:
                  type: string
                  example: "{{iso}}"
                new_name:
                  type: string
                  example: "new{{iso}}"
            example:
              iso: "{{iso}}"
              new_name: "new{{iso}}"
      responses:
        "200":
          description: Pull ISO and rename
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully copied iso.
              examples:
                Pull ISO and rename:
                  value:
                    errors: []
                    help: {}
                    message: Successfully copied iso.
  /resources/iso/rename:
    post:
      tags:
        - ISOs
      summary: Rename ISO
      description: "Rename the specified ISO. The ISO must be present in the local Orka storage.\n\n> **CAUTION:** Make sure that the ISO is not in use. Any VMs that have the ISO of the old name attached will no longer be able to boot from it.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: renameIso
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                iso:
                  type: string
                  example: "{{iso}}"
                new_name:
                  type: string
                  example: "new{{iso}}"
            example:
              iso: "{{iso}}"
              new_name: "new{{iso}}"
      responses:
        "200":
          description: Rename ISO
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "55"
            Date:
              schema:
                type: string
                example: "Thu, 25 Jul 2019 17:48:12 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"37-PMOmaj6Clq0feRDUzzlrIho5jjA\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully renamed ISO
              examples:
                Rename ISO:
                  value:
                    errors: []
                    help: {}
                    message: Successfully renamed ISO
  /resources/iso/upload:
    post:
      tags:
        - ISOs
      summary: Upload an ISO
      description: "Upload an iso to the Orka environment.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the Authorization: Bearer <token> header."
      operationId: uploadAnIso
      requestBody:
        content:
          application/octet-stream: {}
      responses:
        "200":
          description: Upload an ISO
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "67"
            Date:
              schema:
                type: string
                example: "Mon, 02 Aug 2021 18:46:10 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"43-S7zz+I1wLQt3M0um5laBsukk+OY\""
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: "Successfully uploaded {{iso}}"
              examples:
                Upload an ISO:
                  value:
                    errors: []
                    help: {}
                    message: "Successfully uploaded {{iso}}"
  /resources/kube-account:
    get:
      tags:
        - Kube-Accounts
      summary: List kube-accounts
      description: "Retrieve a list of kube-accounts associated with an Orka user.\n\n_Usage:_\n* **No body**: Retrieve a list of the kube-accounts for the Orka user associated with the token passed in the header.\n* **`email` in the body**: Retrieve a list of the kube-accounts for the Orka user with the specified email address.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: listKubeAccounts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
            example:
              email: "{{email}}"
      responses:
        "200":
          description: List kube-accounts (no email)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  serviceAccounts:
                    type: array
                    items:
                      type: string
                      example: "{{kubeAccount}}"
                    example:
                      - "{{kubeAccount}}"
              examples:
                List kube-accounts (no email):
                  value:
                    errors: []
                    help: {}
                    message: ""
                    serviceAccounts:
                      - "{{kubeAccount}}"
    post:
      tags:
        - Kube-Accounts
      summary: Create kube-account
      description: "Create a kube-account and return its `kubeconfig`.\n\n_Usage:_\n* **`name` only**: Create a kube-account for the Orka user associated with the token passed in the header.\n* **`name` and `email`**: Create a kube-account for the Orka user with the specified email address.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: createKubeAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
                name:
                  type: string
                  example: "{{kubeAccount}}"
            example:
              email: "{{email}}"
              name: "{{kubeAccount}}"
      responses:
        "200":
          description: Create kube-account (no email)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "2833"
            Date:
              schema:
                type: string
                example: "Thu, 27 Jun 2019 14:43:14 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"b11-A5pzrLrTatVc2KerWWZY4hxM7NM\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  kubeconfig:
                    type: string
                    example: "\napiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: false\n    certificate-authority-data: REDACTED_FOR_EXAMPLE\n    server: REDACTED_FOR_EXAMPLE\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    namespace: sandbox\n    user: {{kubeAccount}}\n  name: {{kubeAccount}}@kubernetes\ncurrent-context: {{kubeAccount}}@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: {{kubeAccount}}\n  user:\n    token: {{token}}\n"
                  message:
                    type: string
                    example: ""
              examples:
                Create kube-account (no email):
                  value:
                    errors: []
                    help: {}
                    kubeconfig: "\napiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: false\n    certificate-authority-data: REDACTED_FOR_EXAMPLE\n    server: REDACTED_FOR_EXAMPLE\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    namespace: sandbox\n    user: {{kubeAccount}}\n  name: {{kubeAccount}}@kubernetes\ncurrent-context: {{kubeAccount}}@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: {{kubeAccount}}\n  user:\n    token: {{token}}\n"
                    message: ""
    delete:
      tags:
        - Kube-Accounts
      summary: Delete kube-account
      description: "Delete the specified kube-account.\n\n_Usage:_\n* **No body** Delete the kube-account for the Orka user with the token passed in the header.\n* **`email` in the body:** Delete the kube-account for the Orka user with the specified email.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: deleteKubeAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
            example:
              email: "{{email}}"
      responses:
        "200":
          description: Delete kube-account (no email)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Delete kube-account (no email):
                  value:
                    errors: []
                    help: {}
                    message: ""
  /resources/kube-account/download:
    get:
      tags:
        - Kube-Accounts
      summary: Download kubeconfig
      description: "Retrieve the `kubeconfig` for the specified kube-account.\n\n_Usage:_\n* **`name` only**: Retrieve the `kubeconfig` for the specified kube-account. The kube-account must be associated with the Orka user for the token passed in the header.\n* **`name` and `email`**: Retrieve the `kubeconfig` for the specified kube-account of the Orka user with the specified email address.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: downloadKubeconfig
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
                name:
                  type: string
                  example: "{{kubeAccount}}"
            example:
              email: "{{email}}"
              name: "{{kubeAccount}}"
      responses:
        "200":
          description: Download kubeconnfig (with email)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "27"
            Date:
              schema:
                type: string
                example: "Thu, 27 Jun 2019 14:49:24 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"1b-Hyb9vbo41/ZvS66rCFikJA1PwDE\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  kubeconfig:
                    type: string
                    example: "\napiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: false\n    certificate-authority-data: REDACTED_FOR_EXAMPLE\n    server: REDACTED_FOR_EXAMPLE\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    namespace: sandbox\n    user: {{kubeAccount}}\n  name: {{kubeAccount}}@kubernetes\ncurrent-context: {{kubeAccount}}@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: {{kubeAccount}}\n  user:\n    token: {{token}}\n"
                  message:
                    type: string
                    example: ""
              examples:
                Download kubeconnfig (with email):
                  value:
                    errors: []
                    help: {}
                    kubeconfig: "\napiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: false\n    certificate-authority-data: REDACTED_FOR_EXAMPLE\n    server: REDACTED_FOR_EXAMPLE\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    namespace: sandbox\n    user: {{kubeAccount}}\n  name: {{kubeAccount}}@kubernetes\ncurrent-context: {{kubeAccount}}@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: {{kubeAccount}}\n  user:\n    token: {{token}}\n"
                    message: ""
  /resources/kube-account/regenerate:
    post:
      tags:
        - Kube-Accounts
      summary: Regenerate kube-account
      description: "Regenerate the specified kube-account and retrieve its new `kubeconfig`.\n\n_Usage:_\n* **`name` only**: Regenerate the specified kube-account for the Orka user associated with the token passed in the header.\n* **`name` and `email`**: Regenerate the specified kube-account for the Orka user with the specified email address.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: regenerateKubeAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
                name:
                  type: string
                  example: "{{kubeAccount}}"
            example:
              email: "{{email}}"
              name: "{{kubeAccount}}"
      responses:
        "200":
          description: Regenerate kube-account (with email)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  kubeconfig:
                    type: string
                    example: "\napiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: false\n    certificate-authority-data: REDACTED_FOR_EXAMPLE\n    server: REDACTED_FOR_EXAMPLE\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    namespace: sandbox\n    user: {{kubeAccount}}\n  name: {{kubeAccount}}@kubernetes\ncurrent-context: {{kubeAccount}}@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: {{kubeAccount}}\n  user:\n    token: {{token}}\n"
                  message:
                    type: string
                    example: ""
              examples:
                Regenerate kube-account (with email):
                  value:
                    errors: []
                    help: {}
                    kubeconfig: "\napiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: false\n    certificate-authority-data: REDACTED_FOR_EXAMPLE\n    server: REDACTED_FOR_EXAMPLE\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    namespace: sandbox\n    user: {{kubeAccount}}\n  name: {{kubeAccount}}@kubernetes\ncurrent-context: {{kubeAccount}}@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: {{kubeAccount}}\n  user:\n    token: {{token}}\n"
                    message: ""
  /resources/node/groups/$ungrouped:
    post:
      tags:
        - Nodes
      summary: Remove node dedication
      description: "Make the node(s) specified in the body available to all users.\n\n> NOTE: This is a BETA feature.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: removeNodeDedication
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "{{node}}"
              example:
                - "{{node}}"
                - macpro-2
            example:
              - "{{node}}"
              - macpro-2
      responses:
        "200":
          description: Remove node dedication
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        detail:
                          type: string
                          example: "Group <$ungrouped> successfully applied to node <{{node}}>."
                        node:
                          type: string
                          example: "{{node}}"
                    example:
                      - detail: "Group <$ungrouped> successfully applied to node <{{node}}>."
                        node: "{{node}}"
                      - detail: Group <$ungrouped> successfully applied to node <macpro-2>.
                        node: macpro-2
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Remove node dedication:
                  value:
                    details:
                      - detail: "Group <$ungrouped> successfully applied to node <{{node}}>."
                        node: "{{node}}"
                      - detail: Group <$ungrouped> successfully applied to node <macpro-2>.
                        node: macpro-2
                    errors: []
                    help: {}
                    message: ""
  "/resources/node/groups/{userGroup}":
    post:
      tags:
        - Nodes
      summary: Dedicate node
      description: "Dedicate the node(s) specified in the body to the user group specified in the endpoint. Only users from the specified user group will be able to deploy to the node.\n\n> NOTE: This is a BETA feature.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: dedicateNode
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "{{node}}"
              example:
                - "{{node}}"
                - macpro-2
            example:
              - "{{node}}"
              - macpro-2
      responses:
        "200":
          description: Dedicate node
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        detail:
                          type: string
                          example: "Group <{{userGroup}}> successfully applied to node <{{node}}>."
                        node:
                          type: string
                          example: "{{node}}"
                    example:
                      - detail: "Group <{{userGroup}}> successfully applied to node <{{node}}>."
                        node: "{{node}}"
                      - detail: "Group <{{userGroup}}> successfully applied to node <macpro-2>."
                        node: macpro-2
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Dedicate node:
                  value:
                    details:
                      - detail: "Group <{{userGroup}}> successfully applied to node <{{node}}>."
                        node: "{{node}}"
                      - detail: "Group <{{userGroup}}> successfully applied to node <macpro-2>."
                        node: macpro-2
                    errors: []
                    help: {}
                    message: ""
    parameters:
      - name: userGroup
        in: path
        required: true
        schema:
          type: string
  /resources/node/list:
    get:
      tags:
        - Nodes
      summary: List nodes
      description: "Retrieve a list of the nodes in your Orka environment. Orka returns a list of nodes with IP and resource information.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listNodes
      responses:
        "200":
          description: List nodes (none dedicated)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "1227"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 15:12:30 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"4cb-LcBj6ZxvJc12Mchuwg5oe8RNn1Q\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      check_orka_node_status:
                        type: string
                        example: "To check orka node status for a single node use endpoint {{domain}}/resources/node/status/<NODE_NAME>"
                      create_virtual_machine_configuration:
                        type: string
                        example: "To create a virtual machine configuration, please use the endpoint {{domain}}/resources/vm/create"
                      deploy_virtual_machine:
                        type: string
                        example: "To deploy a virtual machine node, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      required_request_data_for_create:
                        type: object
                        properties:
                          orka_base_img:
                            type: string
                            example: "<ORKA_BASE_IMG>"
                          orka_image:
                            type: string
                            example: "<ORKA_IMAGE>"
                          orka_vm_name:
                            type: string
                            example: "<ORKA_VM_NAME>"
                      required_request_data_for_deploy:
                        type: object
                        properties:
                          orka_node_name:
                            type: string
                            example: "<ORKA_NODE_NAME>"
                          orka_vm_name:
                            type: string
                            example: "<ORKA_VM_NAME>"
                  message:
                    type: string
                    example: ""
                  nodes:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                          example: 10.221.188.4
                        allocatable_cpu:
                          type: number
                          example: 24
                        allocatable_gpu:
                          type: string
                          example: N/A
                        available_cpu:
                          type: number
                          example: 12
                        available_gpu:
                          type: string
                          example: N/A
                        available_memory:
                          type: string
                          example: 32.49G
                        hostIP:
                          type: string
                          example: 10.221.188.4
                        host_name:
                          type: string
                          example: macpro-1
                        name:
                          type: string
                          example: macpro-1
                        node_type:
                          type: string
                          example: WORKER
                        orka_tags:
                          type: array
                          items: {}
                          example: []
                        state:
                          type: string
                          example: READY
                        total_cpu:
                          type: number
                          example: 24
                        total_memory:
                          type: string
                          example: 62.92G
                    example:
                      - address: 10.221.188.4
                        allocatable_cpu: 24
                        allocatable_gpu: N/A
                        available_cpu: 12
                        available_gpu: N/A
                        available_memory: 32.49G
                        hostIP: 10.221.188.4
                        host_name: macpro-1
                        name: macpro-1
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 24
                        total_memory: 62.92G
                      - address: 10.221.188.5
                        allocatable_cpu: 24
                        allocatable_gpu: N/A
                        available_cpu: 12
                        available_gpu: N/A
                        available_memory: 32.72G
                        hostIP: 10.221.188.5
                        host_name: macpro-2
                        name: macpro-2
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 24
                        total_memory: 62.92G
                      - address: 10.221.188.6
                        allocatable_cpu: 24
                        allocatable_gpu: N/A
                        available_cpu: 12
                        available_gpu: N/A
                        available_memory: 32.23G
                        hostIP: 10.221.188.6
                        host_name: macpro-3
                        name: macpro-3
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 24
                        total_memory: 62.92G
                      - address: 10.221.188.15
                        allocatable_cpu: 8
                        allocatable_gpu: N/A
                        available_cpu: 8
                        available_gpu: N/A
                        available_memory: 15.39G
                        hostIP: 10.221.188.15
                        host_name: mini-arm-15
                        name: mini-arm-15
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 8
                        total_memory: 15.39G
                      - address: 10.221.188.16
                        allocatable_cpu: 8
                        allocatable_gpu: N/A
                        available_cpu: 8
                        available_gpu: N/A
                        available_memory: 15.39G
                        hostIP: 10.221.188.16
                        host_name: mini-arm-16
                        name: mini-arm-16
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 8
                        total_memory: 15.39G
              examples:
                List nodes (none dedicated):
                  value:
                    errors: []
                    help:
                      check_orka_node_status: "To check orka node status for a single node use endpoint {{domain}}/resources/node/status/<NODE_NAME>"
                      create_virtual_machine_configuration: "To create a virtual machine configuration, please use the endpoint {{domain}}/resources/vm/create"
                      deploy_virtual_machine: "To deploy a virtual machine node, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      required_request_data_for_create:
                        orka_base_img: "<ORKA_BASE_IMG>"
                        orka_image: "<ORKA_IMAGE>"
                        orka_vm_name: "<ORKA_VM_NAME>"
                      required_request_data_for_deploy:
                        orka_node_name: "<ORKA_NODE_NAME>"
                        orka_vm_name: "<ORKA_VM_NAME>"
                    message: ""
                    nodes:
                      - address: 10.221.188.4
                        allocatable_cpu: 24
                        allocatable_gpu: N/A
                        available_cpu: 12
                        available_gpu: N/A
                        available_memory: 32.49G
                        hostIP: 10.221.188.4
                        host_name: macpro-1
                        name: macpro-1
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 24
                        total_memory: 62.92G
                      - address: 10.221.188.5
                        allocatable_cpu: 24
                        allocatable_gpu: N/A
                        available_cpu: 12
                        available_gpu: N/A
                        available_memory: 32.72G
                        hostIP: 10.221.188.5
                        host_name: macpro-2
                        name: macpro-2
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 24
                        total_memory: 62.92G
                      - address: 10.221.188.6
                        allocatable_cpu: 24
                        allocatable_gpu: N/A
                        available_cpu: 12
                        available_gpu: N/A
                        available_memory: 32.23G
                        hostIP: 10.221.188.6
                        host_name: macpro-3
                        name: macpro-3
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 24
                        total_memory: 62.92G
                      - address: 10.221.188.15
                        allocatable_cpu: 8
                        allocatable_gpu: N/A
                        available_cpu: 8
                        available_gpu: N/A
                        available_memory: 15.39G
                        hostIP: 10.221.188.15
                        host_name: mini-arm-15
                        name: mini-arm-15
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 8
                        total_memory: 15.39G
                      - address: 10.221.188.16
                        allocatable_cpu: 8
                        allocatable_gpu: N/A
                        available_cpu: 8
                        available_gpu: N/A
                        available_memory: 15.39G
                        hostIP: 10.221.188.16
                        host_name: mini-arm-16
                        name: mini-arm-16
                        node_type: WORKER
                        orka_tags: []
                        state: READY
                        total_cpu: 8
                        total_memory: 15.39G
  /resources/node/list/all:
    get:
      tags:
        - Nodes
      summary: List all nodes (Admin)
      description: "Retrieve a list of the nodes in your Orka environment. Orka returns a list of nodes with IP and resource information.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listAllNodesAdmin
      responses:
        "200":
          description: ""
  /resources/node/sandbox:
    post:
      tags:
        - Nodes
      summary: Enable sandbox
      description: "> **NOTE**: This request is supported for Intel nodes only.\n\nTag the specified node as sandbox. This limits deployment management from the Orka CLI. You can perform only Kubernetes deployment management with `kubectl`, [Helm](https://helm.sh/docs/helm/#helm), and Tiller.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey:` and `Authorization: Bearer` headers."
      operationId: enableSandbox
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
            example:
              orka_node_name: "{{node}}"
      responses:
        "200":
          description: Enable sandbox
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully tagged node sandbox
              examples:
                Enable sandbox:
                  value:
                    errors: []
                    help: {}
                    message: Successfully tagged node sandbox
    delete:
      tags:
        - Nodes
      summary: Disable sandbox
      description: "> **NOTE**: This request is supported for Intel nodes only.\n\nRemove the sandbox tag for the specified node. This re-enables deployment management with the Orka CLI.\n\nThis operation requires both token and license authentication. You need to pass both the orka-licensekey: and Authorization: Bearer headers."
      operationId: disableSandbox
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
            example:
              orka_node_name: "{{node}}"
      responses:
        "200":
          description: Disable sandbox
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Successfully untagged node sandbox
              examples:
                Disable sandbox:
                  value:
                    errors: []
                    help: {}
                    message: Successfully untagged node sandbox
  "/resources/node/status/{node}":
    get:
      tags:
        - Nodes
      summary: Check node status
      description: "Get a detailed status of the node specified by name in the endpoint. `cpu` and `memory` list the available amounts of the respective node resources.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: checkNodeStatus
      responses:
        "200":
          description: Check node status (foundation)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  node_status:
                    type: object
                    properties:
                      cpu:
                        type: number
                        example: 7
                      gpu:
                        type: number
                        example: 1
                      memory:
                        type: string
                        example: 25.804G
                      nodeName:
                        type: string
                        example: "{{node}}"
                      nodeType:
                        type: string
                        example: FOUNDATION
                      sandbox:
                        type: string
                        example: "false"
                      status:
                        type: string
                        example: FOUNDATION
              examples:
                Check node status (foundation):
                  value:
                    errors: []
                    help: {}
                    message: ""
                    node_status:
                      cpu: 7
                      gpu: 1
                      memory: 25.804G
                      nodeName: "{{node}}"
                      nodeType: FOUNDATION
                      sandbox: "false"
                      status: FOUNDATION
    parameters:
      - name: node
        in: path
        required: true
        schema:
          type: string
  "/resources/node/tag/{nodeTag}":
    post:
      tags:
        - Nodes
      summary: Tag node
      description: "Mark a node with a custom tag. This allows when deploying a VM to target nodes having this custom tag.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey:` and `Authorization: Bearer` headers."
      operationId: tagNode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
            example:
              orka_node_name: "{{node}}"
      responses:
        "200":
          description: ""
    delete:
      tags:
        - Nodes
      summary: Untag node
      description: "Remove a custom tag from a certain node.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey:` and `Authorization: Bearer` headers."
      operationId: untagNode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
            example:
              orka_node_name: "{{node}}"
      responses:
        "200":
          description: ""
    parameters:
      - name: nodeTag
        in: path
        required: true
        schema:
          type: string
  /resources/ports:
    get:
      tags:
        - Nodes
      summary: List ports
      description: "Get a detailed list of all reserved ports on all nodes in your Orka environment. Orka lists them as port mappings between `host_port` and `guest_port`. `host_port` indicates a port on the node, `guest_port` indicates a port on a VM on this node.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listPorts
      responses:
        "200":
          description: List ports
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "616"
            Date:
              schema:
                type: string
                example: "Tue, 06 Aug 2019 14:04:55 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"268-SaxnyyXclTk+x6JhLK2C8hCyJ80\""
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  reserved_ports:
                    type: array
                    items:
                      type: object
                      properties:
                        guest_port:
                          type: number
                          example: 5999
                        host_port:
                          type: number
                          example: 5999
                        orka_node_name:
                          type: string
                          example: macpro-3
                        protocol:
                          type: string
                          example: TCP
                    example:
                      - guest_port: 5999
                        host_port: 5999
                        orka_node_name: macpro-3
                        protocol: TCP
                      - guest_port: 5900
                        host_port: 5900
                        orka_node_name: macpro-3
                        protocol: TCP
                      - guest_port: 8821
                        host_port: 8822
                        orka_node_name: macpro-3
                        protocol: TCP
                      - guest_port: 5999
                        host_port: 5999
                        orka_node_name: macpro-1
                        protocol: TCP
                      - guest_port: 5900
                        host_port: 5900
                        orka_node_name: macpro-1
                        protocol: TCP
                      - guest_port: 8821
                        host_port: 8822
                        orka_node_name: macpro-1
                        protocol: TCP
                      - guest_port: 5999
                        host_port: 5999
                        orka_node_name: macpro-2
                        protocol: TCP
                      - guest_port: 5900
                        host_port: 5900
                        orka_node_name: macpro-2
                        protocol: TCP
                      - guest_port: 8821
                        host_port: 8822
                        orka_node_name: macpro-2
                        protocol: TCP
              examples:
                List ports:
                  value:
                    errors: []
                    help: {}
                    message: ""
                    reserved_ports:
                      - guest_port: 5999
                        host_port: 5999
                        orka_node_name: macpro-3
                        protocol: TCP
                      - guest_port: 5900
                        host_port: 5900
                        orka_node_name: macpro-3
                        protocol: TCP
                      - guest_port: 8821
                        host_port: 8822
                        orka_node_name: macpro-3
                        protocol: TCP
                      - guest_port: 5999
                        host_port: 5999
                        orka_node_name: macpro-1
                        protocol: TCP
                      - guest_port: 5900
                        host_port: 5900
                        orka_node_name: macpro-1
                        protocol: TCP
                      - guest_port: 8821
                        host_port: 8822
                        orka_node_name: macpro-1
                        protocol: TCP
                      - guest_port: 5999
                        host_port: 5999
                        orka_node_name: macpro-2
                        protocol: TCP
                      - guest_port: 5900
                        host_port: 5900
                        orka_node_name: macpro-2
                        protocol: TCP
                      - guest_port: 8821
                        host_port: 8822
                        orka_node_name: macpro-2
                        protocol: TCP
  /resources/vm/attach-disk:
    post:
      tags:
        - VMs
      summary: Attach disk
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nAttach a disk to the VM specified by ID. The VM must be deployed. The VM must be non-scaled.\n\nYou can attach any of the following disks:\n\n*   Any disks created with `orka image generate`.\n*   Any non-bootable images available in your Orka storage and listed by `orka image list`.\n    \n\n> **IMPORTANT:** Before you can use the attached disk, you need to restart the VM with a [manual stop](https://documenter.getpostman.com/view/6574930/S1ETRGzt?version=latest#f312bc33-e0f2-4726-b926-4969e51f7d43) of the VM, followed by a [manual start](https://documenter.getpostman.com/view/6574930/S1ETRGzt?version=latest#a8add7c1-d3a0-43e0-a6cb-205637468ba2) VM. A software reboot from the OS will not trigger macOS to recognize the disk.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: attachDisk
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image_name:
                  type: string
                  example: "{{storageImage}}"
                mount_point:
                  type: string
                  example: "sd[c-z]"
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              image_name: "{{storageImage}}"
              mount_point: "sd[c-z]"
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: Attach disk
          content:
            application/json:
              schema:
                type: object
                properties:
                  deploy_virtual_machine:
                    type: string
                    example: "Start and stop the machine using \"orka vm start/stop\" for changes to take effect"
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Succesfully Attached
              examples:
                Attach disk:
                  value:
                    deploy_virtual_machine: "Start and stop the machine using \"orka vm start/stop\" for changes to take effect"
                    errors: []
                    help: {}
                    message: Succesfully Attached
  /resources/vm/clone:
    post:
      tags:
        - VMs
      summary: Clone VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nClone a deployed VM from a selected source node (`current_node_name`) to a destination node (`new_nodes`). You must specify the VM by ID. You can set only one destination node.\n\nThis operation retains the VM on the source node. The clone receives a new ID and might receive a new IP and assigned ports, based on the destination node.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: cloneVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_node_name:
                  type: string
                  example: "{{node}}"
                new_nodes:
                  type: array
                  items:
                    type: string
                    example: "{{newNode}}"
                  example:
                    - "{{newNode}}"
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              current_node_name: "{{node}}"
              new_nodes:
                - "{{newNode}}"
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: Clone VM to another node
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Cloned vm
                  port_warnings:
                    type: array
                    items: {}
                    example: []
                  vm_id:
                    type: string
                    example: cebed25ee20b4
              examples:
                Clone VM to another node:
                  value:
                    errors: []
                    help: {}
                    message: Cloned vm
                    port_warnings: []
                    vm_id: cebed25ee20b4
  /resources/vm/configs:
    get:
      tags:
        - VMs
      summary: List your VM configurations
      description: "Retrieve a list of the VM configurations associated with the token passed in the header. Orka returns information about the base image, CPU cores, owner and name of the VM configurations.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listYourVmConfigurations
      requestBody:
        content:
          text/plain:
            example: ""
      responses:
        "200":
          description: List your VM configurations
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "444"
            Date:
              schema:
                type: string
                example: "Thu, 03 Oct 2019 14:06:18 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"1bc-P9kumJZ3CjrSbbFe9vvE1rubZd0\""
          content:
            application/json:
              schema:
                type: object
                properties:
                  configs:
                    type: array
                    items:
                      type: object
                      properties:
                        attached_disk:
                          type: string
                          example: None
                        gpu_passthrough:
                          type: boolean
                          example: false
                        io_boost:
                          type: boolean
                          example: false
                        iso_image:
                          type: string
                          example: None
                        memory:
                          example: 10
                          anyOf:
                            - type: number
                              example: 10
                            - type: string
                              example: automatic
                            - type: string
                              example: automatic
                            - type: string
                              example: automatic
                        orka_base_image:
                          type: string
                          example: "{{baseImage}}"
                        orka_cpu_core:
                          type: number
                          example: 6
                        orka_vm_name:
                          type: string
                          example: "{{vm}}"
                        owner:
                          type: string
                          example: "{{email}}"
                        scheduler:
                          type: string
                          example: default
                        system_serial:
                          type: string
                          example: N/A
                        tag:
                          type: string
                          example: node-pool
                        tag_required:
                          type: boolean
                          example: false
                        use_saved_state:
                          type: boolean
                          example: false
                        vcpu_count:
                          type: number
                          example: 6
                        vnc_console:
                          type: boolean
                          example: true
                    example:
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: 10
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 6
                        orka_vm_name: "{{vm}}"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vcpu_count: 6
                        vnc_console: true
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: automatic
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 3
                        orka_vm_name: "{{vm}}1"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vcpu_count: 3
                        vnc_console: false
                      - attached_disk: "{{storageImage}}"
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: automatic
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 6
                        orka_vm_name: "{{vm}}2"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vcpu_count: 6
                        vnc_console: true
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: "{{iso}}"
                        memory: automatic
                        orka_base_image: "{{storageImage}}"
                        orka_cpu_core: 12
                        orka_vm_name: "{{vm}}3"
                        owner: "{{email}}"
                        use_saved_state: false
                        vcpu_count: 12
                        vnc_console: true
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                List your VM configurations:
                  value:
                    configs:
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: 10
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 6
                        orka_vm_name: "{{vm}}"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vcpu_count: 6
                        vnc_console: true
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: automatic
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 3
                        orka_vm_name: "{{vm}}1"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vcpu_count: 3
                        vnc_console: false
                      - attached_disk: "{{storageImage}}"
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: automatic
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 6
                        orka_vm_name: "{{vm}}2"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vcpu_count: 6
                        vnc_console: true
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: "{{iso}}"
                        memory: automatic
                        orka_base_image: "{{storageImage}}"
                        orka_cpu_core: 12
                        orka_vm_name: "{{vm}}3"
                        owner: "{{email}}"
                        use_saved_state: false
                        vcpu_count: 12
                        vnc_console: true
                    errors: []
                    help: {}
                    message: ""
  /resources/vm/configs/save-state:
    post:
      tags:
        - VMs
      summary: Save VM State
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nSave a VM configuration state (disk and memory). You must specify the VM by ID. Now when you deploy the VM configuration it will use the saved state to boot the VM.\n\nThe VM must be deployed. If VM state is previously saved, it is overwritten. To overwrite the VM state, it must not be used by any deployed VM.\n\n> **NOTE:** Saving VM state is restricted only to VMs that have GPU passthrough disabled.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: saveVmState
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: Save VM State
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      info:
                        type: string
                        example: "Deploying a VM from VM configuration '{{vm}}' will now boot from the saved state"
                  message:
                    type: string
                    example: Successfully saved VM configuration state.
              examples:
                Save VM State:
                  value:
                    errors: []
                    help:
                      info: "Deploying a VM from VM configuration '{{vm}}' will now boot from the saved state"
                    message: Successfully saved VM configuration state.
  "/resources/vm/configs/{vm}":
    get:
      tags:
        - VMs
      summary: Get VM configuration by name
      description: "Get information about the VM configuration specified in the endpoint. The VM configuration must be associated with the token passed in the header. \n\nOrka returns information about the base image, CPU cores, owner and name of the VM configuration.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: getVmConfigurationByName
      requestBody:
        content:
          text/plain:
            example: ""
      responses:
        "200":
          description: Get VM configuration by name without custom memory
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "180"
            Date:
              schema:
                type: string
                example: "Thu, 03 Oct 2019 14:11:13 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"b4-VsJENnPr4B7YDStj5V3cv24PuOw\""
          content:
            application/json:
              schema:
                type: object
                properties:
                  configs:
                    type: array
                    items:
                      type: object
                      properties:
                        attached_disk:
                          type: string
                          example: None
                        gpu_passthrough:
                          type: boolean
                          example: false
                        io_boost:
                          type: boolean
                          example: false
                        iso_image:
                          type: string
                          example: None
                        memory:
                          type: string
                          example: automatic
                        orka_base_image:
                          type: string
                          example: "{{baseImage}}"
                        orka_cpu_core:
                          type: number
                          example: 6
                        orka_vm_name:
                          type: string
                          example: "{{vm}}"
                        owner:
                          type: string
                          example: "{{email}}"
                        scheduler:
                          type: string
                          example: default
                        system_serial:
                          type: string
                          example: N/A
                        tag:
                          type: string
                          example: node-pool
                        tag_required:
                          type: boolean
                          example: false
                        use_saved_state:
                          type: boolean
                          example: false
                        vnc_console:
                          type: boolean
                          example: true
                    example:
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: automatic
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 6
                        orka_vm_name: "{{vm}}"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vnc_console: true
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Get VM configuration by name without custom memory:
                  value:
                    configs:
                      - attached_disk: None
                        gpu_passthrough: false
                        io_boost: false
                        iso_image: None
                        memory: automatic
                        orka_base_image: "{{baseImage}}"
                        orka_cpu_core: 6
                        orka_vm_name: "{{vm}}"
                        owner: "{{email}}"
                        scheduler: default
                        system_serial: N/A
                        tag: node-pool
                        tag_required: false
                        use_saved_state: false
                        vnc_console: true
                    errors: []
                    help: {}
                    message: ""
    parameters:
      - name: vm
        in: path
        required: true
        schema:
          type: string
  "/resources/vm/configs/{vm}/delete-state":
    delete:
      tags:
        - VMs
      summary: Delete VM State
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nDelete a VM configuration state. You must specify the VM in the request URL by name. Now when you deploy the VM configuration it will use the base image to boot the VM.\n\nTo delete a VM state, it must not be used by any deployed VM.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: deleteVmState
      requestBody:
        content:
          text/plain:
            example: ""
      responses:
        "200":
          description: Delete VM State
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      info:
                        type: string
                        example: "Deploying a VM from VM configuration '{{vm}}' will now boot from the base image"
                  message:
                    type: string
                    example: Successfully deleted the VM configuration state
              examples:
                Delete VM State:
                  value:
                    errors: []
                    help:
                      info: "Deploying a VM from VM configuration '{{vm}}' will now boot from the base image"
                    message: Successfully deleted the VM configuration state
    parameters:
      - name: vm
        in: path
        required: true
        schema:
          type: string
  /resources/vm/create:
    post:
      tags:
        - VMs
      summary: Create VM configuration
      description: "Create a [VM configuration](https://orkadocs.macstadium.com/docs/orka-glossary#section-vm-configuration) that is ready for deployment. In Orka, VM configurations are container templates.\n\nYou can deploy multiple VMs from a single VM configuration. You cannot modify VM configurations.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   `orka_vm_name`: Required. The name of the VM configuration. This string must consist of lowercase Latin alphanumeric characters or the dash (`-`). This string must begin and end with an alphanumeric character. This string must not exceed 38 characters.\n*   `orka_base_image`: Required. The name of the base image that you want to use with the configuration.  \n    If you want to attach an ISO to the VM configuration from which to install macOS, make sure that the base image is an empty disk of a sufficient size.\n*   `orka_image`: Required. A name for the [snapshot image](https://orkadocs.macstadium.com/docs/orka-glossary#section-snapshot-image) of the VM. Typically, the same value as `orka_vm_name`.\n*   `orka_cpu_core`: Required. The number of CPU cores to dedicate for the VM. Must be 3, 4, 6, 8, 12, or 24.\n*   `vcpu_count`: Required. The number of vCPUs for the VM. Must equal the number of CPUs, when CPU is less than or equal to 3. Otherwise, must equal half of or exactly the number of CPUs specified.\n*   `iso_image`: Optional. An ISO to attach to the VM on deployment. The option is supported for VMs deployed on Intel nodes only.\n*   `attached_disk`: Optional. An additional storage disk to attach to the VM on deployment. The option is supported for VMs deployed on Intel nodes only.\n*   `vnc_console`: Optional. By default, `true`. Enables or disables VNC for the VM configuration. You can override on deployment of specific VMs. The option is supported for VMs deployed on Intel nodes only.\n*   `system_serial`: Optional. Assign an owned macOS system serial number to the VM configuration. The option is supported for VMs deployed on Intel nodes only.\n*   `io_boost`: Optional. By default, `false` for VM configurations created before Orka 1.5. Default value for VM configurations created with Orka 1.5 or later depends on the cluster default. Enables or disables IO performance improvements for the VM configuration. The option is supported for VMs deployed on Intel nodes only.\n*   `gpu_passthrough`: Optional. Enables or disables GPU passthrough for the VM. When enabled, `vnc_console` is automatically disabled. The option is supported for VMs deployed on Intel nodes only.\n    \n\n> **IMPORTANT** GPU passthrough must first be enabled in your cluster. Contact the [MacStadium team](https://portal.macstadium.com/login) for more details.\n\n*   `tag`: Optional. When specified, the VM is preferred to be deployed to a node marked with this tag.\n*   `tag_required`: Optional. By default, `false`. When set to `true`, the VM is required to be deployed to a node marked with this tag.\n*   `scheduler`: Optional. Possible values are `default` and `most-allocated`. By default, `default`. When set to `most-allocated` VMs deployed from the VM configuration will be scheduled to nodes having most of their resources allocated. `default` keeps used vs free resources balanced between the nodes."
      operationId: createVmConfiguration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attached_disk:
                  type: string
                  example: "{{storageImage}}"
                iso_image:
                  type: string
                  example: "{{iso}}"
                orka_base_image:
                  type: string
                  example: "{{baseImage}}"
                orka_cpu_core:
                  type: number
                  example: 12
                orka_image:
                  type: string
                  example: "{{vm}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
                scheduler:
                  type: string
                  example: default
                system_serial:
                  type: string
                  example: "{{systemSerial}}"
                tag:
                  type: string
                  example: "{{nodeTag}}"
                tag_required:
                  type: boolean
                  example: false
                vcpu_count:
                  type: number
                  example: 12
                vnc_console:
                  type: boolean
                  example: true
            example:
              attached_disk: "{{storageImage}}"
              iso_image: "{{iso}}"
              orka_base_image: "{{baseImage}}"
              orka_cpu_core: 12
              orka_image: "{{vm}}"
              orka_vm_name: "{{vm}}"
              scheduler: default
              system_serial: "{{systemSerial}}"
              tag: "{{nodeTag}}"
              tag_required: false
              vcpu_count: 12
              vnc_console: true
      responses:
        "201":
          description: Create VM configuration with custom memory
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "328"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 15:14:28 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"148-fA6PVN+4I0P9g9krkNwq78LKurU\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      deploy_virtual_machine:
                        type: string
                        example: "To deploy a VM, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      required_request_data_for_deploy:
                        type: object
                        properties:
                          orka_node_name:
                            type: string
                            example: "<ORKA_NODE_NAME>"
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                  message:
                    type: string
                    example: Successfully Created
              examples:
                Create VM configuration with custom memory:
                  value:
                    errors: []
                    help:
                      deploy_virtual_machine: "To deploy a VM, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      required_request_data_for_deploy:
                        orka_node_name: "<ORKA_NODE_NAME>"
                        orka_vm_name: "{{vm}}"
                    message: Successfully Created
  /resources/vm/delete:
    delete:
      tags:
        - VMs
      summary: "Delete user's VM (Admin)"
      description: "Remove one or more deployed VMs of another user from a node. This operation requires administrative privileges.\n\nThis operation does not remove the VM configuration from which the VM was deployed. To delete the configuration as well, use `purge`.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers.\n\n_Usage:_\n- Specifying a VM ID (instead of name) deletes **only the VMs with that ID**. Multiple VMs might share the same ID if they have been deployed as replicas.\n- Specifying a VM name and a node deletes **all deployments with that name from that node**. You can delete by name and node only non-scaled VMs.\n- Specifying a VM name (without specifying a node) deletes **all deployments with that name**. You can delete by name only non-scaled VMs.\n\n> **IMPORTANT:** Always delete VMs in an `ERROR` state by ID."
      operationId: deleteUserSVmAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Delete VM for another user by ID (Admin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      deploy_virtual_machine:
                        type: string
                        example: "To deploy a virtual machine, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      list_orka_nodes:
                        type: string
                        example: "To list orka nodes send a rest a request to {{domain}}/resources/node/list"
                      required_request_data_for_deploy:
                        type: object
                        properties:
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                  message:
                    type: string
                    example: Successfully deleted virtual machine
              examples:
                Delete VM for another user by ID (Admin):
                  value:
                    errors: []
                    help:
                      deploy_virtual_machine: "To deploy a virtual machine, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      list_orka_nodes: "To list orka nodes send a rest a request to {{domain}}/resources/node/list"
                      required_request_data_for_deploy:
                        orka_vm_name: "{{vm}}"
                    message: Successfully deleted virtual machine
  /resources/vm/deploy:
    post:
      tags:
        - VMs
      summary: Deploy VM configuration
      description: "Deploy an existing VM configuration to a node. If you don't specify a node, Orka chooses a node based on the available resources.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   `orka_vm_name`: Required. The name of the VM configuration that you want to deploy.\n*   `orka_node_name`: Optional. The name of the node on which to deploy the VM. The node must have sufficient CPU and memory to accommodate the VM.\n*   `replicas`: Optional. The scale at which to deploy the VM configuration. If not specified, defaults to `1` (non-scaled). The option is supported for VMs deployed on Intel nodes only.\n*   `reserved_ports`: Optional. One or more port mappings that enable additional ports on your VM. You need to map a port from the node to a port on the VM in the following format `:`. The following ports and port ranges are reserved and cannot be used: `22`, `443`, `6443`, `5000-5014`, `5999-6013`, `8822-8836`. You can pass multiple mappings, separated by a comma.\n*   `iso_install`: Optional. Set to `true` if you want to use an ISO. The option is supported for VMs deployed on Intel nodes only.\n*   `iso_image`: Optional. An ISO to attach to the VM during deployment. If already set in the respective VM configuration and not set here, Orka applies the setting from the VM configuration. You can also use this field to override any ISO specified in the VM configuration. The option is supported for VMs deployed on Intel nodes only.\n*   `attach_disk`: Optional. Set to `true` if you want to attach additional storage during deployment. The option is supported for VMs deployed on Intel nodes only.\n*   `attached_disk`: Optional. An additional storage disk to attach to the VM during deployment. If already set in the respective VM configuration and not set here, Orka applies the setting from the VM configuration. You can also use this field to override any storage specified in the VM configuration. The option is supported for VMs deployed on Intel nodes only.\n*   `vnc_console`: Optional. Enables or disables VNC for the VM. If not set in the VM configuration or here, defaults to `true`. If already set in the respective VM configuration and not set here, Orka applies the setting from the VM configuration. You can also use this field to override the VNC setting specified in the VM configuration. The option is supported for VMs deployed on Intel nodes only.\n*   `vm_metadata`: Optional. Inject custom metadata to the VM. You need to provide the metadata in format `\"items\": [{\"key\": \"\", \"value\": \"\"}]`. If not set, only the built-in metadata is injected into the VM. The option is supported for VMs deployed on Intel nodes only.\n*   `system_serial`: Optional. Assign an owned macOS system serial number to the VM. If already set in the respective VM configuration and not set here, Orka applies the setting from the VM configuration. The option is supported for VMs deployed on Intel nodes only.\n*   `gpu_passthrough`: Optional. Enables or disables GPU passthrough for the VM. If not set in the VM configuration or here, defaults to `false`. If already set in the respective VM configuration and not set here, Orka applies the setting from the VM configuration. You can also use this field to override the GPU passthrough setting specified in the VM configuration. When enabled, `vnc_console` is automatically disabled. The option is supported for VMs deployed on Intel nodes only.\n    \n\n> **IMPORTANT** GPU passthrough must first be enabled in your cluster. Contact the [MacStadium team](https://portal.macstadium.com/login) for more details.\n\n*   `tag`: Optional. When specified, the VM is preferred to be deployed to a node marked with this tag.\n*   `tag_required`: Optional. By default, `false`. When set to `true`, the VM is required to be deployed to a node marked with this tag.\n*   `scheduler`: Optional. Possible values are `default` and `most-allocated`. By default, `default`. When set to `most-allocated` The deployed VM will be scheduled to nodes having most of their resources allocated. `default` keeps used vs free resources balanced between the nodes."
      operationId: deployVmConfiguration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attach_disk:
                  type: boolean
                  example: true
                attached_disk:
                  type: string
                  example: "{{storageImage}}"
                gpu_passthrough:
                  type: boolean
                  example: false
                iso_image:
                  type: string
                  example: "{{iso}}"
                iso_install:
                  type: boolean
                  example: true
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
                replicas:
                  type: number
                  example: 2
                reserved_ports:
                  type: array
                  items:
                    type: string
                    example: "<NODE PORT>:<VM PORT>"
                  example:
                    - "<NODE PORT>:<VM PORT>"
                scheduler:
                  type: string
                  example: default
                system_serial:
                  type: string
                  example: "{{systemSerial}}"
                tag:
                  type: string
                  example: "{{nodeTag}}"
                tag_required:
                  type: boolean
                  example: false
                vm_metadata:
                  type: object
                  properties:
                    items:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                            example: "<KEY>"
                          value:
                            type: string
                            example: "<VALUE>"
                      example:
                        - key: "<KEY>"
                          value: "<VALUE>"
                vnc_console:
                  type: boolean
                  example: true
            example:
              attach_disk: true
              attached_disk: "{{storageImage}}"
              gpu_passthrough: false
              iso_image: "{{iso}}"
              iso_install: true
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
              replicas: 2
              reserved_ports:
                - "<NODE PORT>:<VM PORT>"
              scheduler: default
              system_serial: "{{systemSerial}}"
              tag: "{{nodeTag}}"
              tag_required: false
              vm_metadata:
                items:
                  - key: "<KEY>"
                    value: "<VALUE>"
              vnc_console: true
      responses:
        "200":
          description: Deploy VM configuration with VM scheduler
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  gpu_passthrough:
                    type: boolean
                    example: false
                  help:
                    type: object
                    properties:
                      data_for_virtual_machine_exec_tasks:
                        type: object
                        properties:
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                      resume_virtual_machine:
                        type: string
                        example: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      start_virtual_machine:
                        type: string
                        example: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine:
                        type: string
                        example: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine:
                        type: string
                        example: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc:
                        type: string
                        example: "Once started and deployed, you can use VNC to access it via {{vmIP}}:6001"
                  host_cpu:
                    type: string
                    example: "6"
                  io_boost:
                    type: boolean
                    example: true
                  ip:
                    type: string
                    example: "{{vmIP}}"
                  message:
                    type: string
                    example: Successfully deployed VM
                  port_warnings:
                    type: array
                    items: {}
                    example: []
                  ram:
                    type: string
                    example: 15G
                  screen_share_port:
                    type: string
                    example: "5902"
                  ssh_port:
                    type: string
                    example: "8824"
                  use_saved_state:
                    type: boolean
                    example: false
                  vcpu:
                    type: string
                    example: "6"
                  vm_id:
                    type: string
                    example: "{{vmID}}"
                  vnc_port:
                    type: string
                    example: "6001"
              examples:
                Deploy VM configuration with VM scheduler:
                  value:
                    errors: []
                    gpu_passthrough: false
                    help:
                      data_for_virtual_machine_exec_tasks:
                        orka_vm_name: "{{vm}}"
                      resume_virtual_machine: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      start_virtual_machine: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc: "Once started and deployed, you can use VNC to access it via {{vmIP}}:6001"
                    host_cpu: "6"
                    io_boost: true
                    ip: "{{vmIP}}"
                    message: Successfully deployed VM
                    port_warnings: []
                    ram: 15G
                    screen_share_port: "5902"
                    ssh_port: "8824"
                    use_saved_state: false
                    vcpu: "6"
                    vm_id: "{{vmID}}"
                    vnc_port: "6001"
  /resources/vm/exec/resume:
    post:
      tags:
        - VMs
      summary: Resume VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nResume the VM specified by name or ID. The VM must already be suspended.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   When you specify the VM by name, you need to specify a node as well. This resumes all VMs with the specified name on the specified node.\n*   When you specify the VM by ID, you don't need to specify the node."
      operationId: resumeVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Resume VM by ID
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "732"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 16:50:22 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"2dc-ybHAWIXP3Juk1bHAzdcfmxY4SGI\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      data_for_virtual_machine_exec_tasks:
                        type: object
                        properties:
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                      resume_virtual_machine:
                        type: string
                        example: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine:
                        type: string
                        example: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state:
                        type: string
                        example: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine:
                        type: string
                        example: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine:
                        type: string
                        example: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine:
                        type: string
                        example: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                  message:
                    type: string
                    example: "{{vmID}} has resumed on node"
              examples:
                Resume VM by ID:
                  value:
                    errors: []
                    help:
                      data_for_virtual_machine_exec_tasks:
                        orka_vm_name: "{{vm}}"
                      resume_virtual_machine: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                    message: "{{vmID}} has resumed on node"
  /resources/vm/exec/revert:
    post:
      tags:
        - VMs
      summary: Revert VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nRevert the specified VM to the latest state of its base image. This operation restarts the VM. You can specify the VM by name, name and node, or ID.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   When you specify the VM by name and there are multiple VMs with that name, you need to specify a node as well. This reverts all VMs with the specified name on the specified node.\n*   When you specify the VM by ID, you don't need to specify the node."
      operationId: revertVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Revert VM by name and node
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "870"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 16:43:26 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"366-eVJUZmqBGwMXdZtf3shY9ZkeGa4\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      data_for_virtual_machine_exec_tasks:
                        type: object
                        properties:
                          orka_node_name:
                            type: string
                            example: "{{node}}"
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                      resume_virtual_machine:
                        type: string
                        example: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine:
                        type: string
                        example: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state:
                        type: string
                        example: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine:
                        type: string
                        example: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine:
                        type: string
                        example: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine:
                        type: string
                        example: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc:
                        type: string
                        example: "Once started and deployed, you can use VNC to access this VM via {{vmIP}}"
                  message:
                    type: string
                    example: "Successfully reverted {{vm}} on {{node}}"
              examples:
                Revert VM by name and node:
                  value:
                    errors: []
                    help:
                      data_for_virtual_machine_exec_tasks:
                        orka_node_name: "{{node}}"
                        orka_vm_name: "{{vm}}"
                      resume_virtual_machine: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc: "Once started and deployed, you can use VNC to access this VM via {{vmIP}}"
                    message: "Successfully reverted {{vm}} on {{node}}"
  /resources/vm/exec/start:
    post:
      tags:
        - VMs
      summary: Start VM
      description: "> **NOTE:** This request is supported for VMs deployed on Intel nodes only\n\nPower ON the VM specified by name or ID.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   When you specify the VM by name, you need to specify a node as well. This starts all VMs with the specified name on the specified node.\n*   When you specify the VM by ID, you don't need to specify the node."
      operationId: startVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Start VM by ID
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "732"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 16:11:51 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"2dc-0vIm+WWrlc5vpljXIyHhGfbpZm0\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      data_for_virtual_machine_exec_tasks:
                        type: object
                        properties:
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                      resume_virtual_machine:
                        type: string
                        example: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine:
                        type: string
                        example: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state:
                        type: string
                        example: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine:
                        type: string
                        example: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine:
                        type: string
                        example: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine:
                        type: string
                        example: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                  message:
                    type: string
                    example: "{{vmID}} has started on node"
              examples:
                Start VM by ID:
                  value:
                    errors: []
                    help:
                      data_for_virtual_machine_exec_tasks:
                        orka_vm_name: "{{vm}}"
                      resume_virtual_machine: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                    message: "{{vmID}} has started on node"
  /resources/vm/exec/stop:
    post:
      tags:
        - VMs
      summary: Stop VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nPower OFF the VM specified by name and node or by ID.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   When you specify the VM by name, you need to specify a node as well. This stops all VMs with the specified name on the specified node.\n*   When you specify the VM by ID, you don't need to specify the node."
      operationId: stopVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Stop VM by name and node
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "875"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 15:43:35 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"36b-S9XFfT9/TUcbuvGmwCXEFM/yNf4\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      data_for_virtual_machine_exec_tasks:
                        type: object
                        properties:
                          orka_node_name:
                            type: string
                            example: "{{node}}"
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                      resume_virtual_machine:
                        type: string
                        example: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine:
                        type: string
                        example: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state:
                        type: string
                        example: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine:
                        type: string
                        example: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine:
                        type: string
                        example: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine:
                        type: string
                        example: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc:
                        type: string
                        example: "Once started and deployed, you can use VNC to access this VM via {{vmIP}}"
                  message:
                    type: string
                    example: "{{vm}} has stopped on {{node}}"
              examples:
                Stop VM by name and node:
                  value:
                    errors: []
                    help:
                      data_for_virtual_machine_exec_tasks:
                        orka_node_name: "{{node}}"
                        orka_vm_name: "{{vm}}"
                      resume_virtual_machine: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc: "Once started and deployed, you can use VNC to access this VM via {{vmIP}}"
                    message: "{{vm}} has stopped on {{node}}"
  /resources/vm/exec/suspend:
    post:
      tags:
        - VMs
      summary: Suspend VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nSuspend the VM specified by name or ID.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header.\n\n*Usage:*\n\n*   When you specify the VM by name, you need to specify a node as well. This suspends all VMs with the specified name on the specified node.\n*   When you specify the VM by ID, you don't need to specify the node."
      operationId: suspendVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_node_name:
                  type: string
                  example: "{{node}}"
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_node_name: "{{node}}"
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Suspend VM by name and node
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "877"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 16:42:17 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"36d-9ojeTay97Zb4Mfctfvgo3utqWs4\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      data_for_virtual_machine_exec_tasks:
                        type: object
                        properties:
                          orka_node_name:
                            type: string
                            example: "{{node}}"
                          orka_vm_name:
                            type: string
                            example: "{{vm}}"
                      resume_virtual_machine:
                        type: string
                        example: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine:
                        type: string
                        example: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state:
                        type: string
                        example: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine:
                        type: string
                        example: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine:
                        type: string
                        example: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine:
                        type: string
                        example: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc:
                        type: string
                        example: "Once started and deployed, you can use VNC to access this VM via {{vmIP}}"
                  message:
                    type: string
                    example: "{{vm}} has been suspended on {{node}}"
              examples:
                Suspend VM by name and node:
                  value:
                    errors: []
                    help:
                      data_for_virtual_machine_exec_tasks:
                        orka_node_name: "{{node}}"
                        orka_vm_name: "{{vm}}"
                      resume_virtual_machine: "To resume a VM send rest request to {{domain}}/resources/vm/exec/resume"
                      revert_virtual_machine: "To revert a VM send rest request to {{domain}}/resources/vm/exec/revert"
                      save_virtual_machine_state: "To save a VM config state using an already deployed VM send rest request to {{domain}}/resources/vm/configs/save-state"
                      start_virtual_machine: "To start a VM send rest request to {{domain}}/resources/vm/exec/start"
                      stop_virtual_machine: "To stop a VM send rest request to {{domain}}/resources/vm/exec/stop"
                      suspend_virtual_machine: "To suspend a VM send rest request to {{domain}}/resources/vm/exec/suspend"
                      virtual_machine_vnc: "Once started and deployed, you can use VNC to access this VM via {{vmIP}}"
                    message: "{{vm}} has been suspended on {{node}}"
  /resources/vm/list:
    get:
      tags:
        - VMs
      summary: List your VMs
      description: "Retrieve a list of the VMs and VM configurations associated with the token passed in the header. Orka returns detailed status and system information for all listed VMs.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: listYourVMs
      responses:
        "200":
          description: List your VMs with scaled VMs expanded
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "1121"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 15:10:43 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"461-NrhudjdAW4Kt4kAAKtYYKfissRM\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  virtual_machine_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        base_image:
                          type: string
                          example: "{{baseImage}}"
                        configuration_template:
                          type: string
                          example: default
                        cpu:
                          type: number
                          example: 6
                        gpu_passthrough:
                          type: boolean
                          example: false
                        image:
                          type: string
                          example: "{{vm}}2"
                        io_boost:
                          type: boolean
                          example: false
                        owner:
                          type: string
                          example: "{{email}}"
                        status:
                          type: array
                          items:
                            type: object
                            properties:
                              RAM:
                                type: string
                                example: 7.5G
                              base_image:
                                type: string
                                example: "{{baseImage}}"
                              configuration_template:
                                type: string
                                example: default
                              cpu:
                                type: number
                                example: 3
                              creationTimestamp:
                                type: string
                                example: "2020-07-28T11:09:25Z"
                              creation_timestamp:
                                type: string
                                example: "2022-02-10T14:01:26Z"
                              gpu:
                                type: string
                                example: N/A
                              image:
                                type: string
                                example: "{{vm}}"
                              io_boost:
                                type: boolean
                                example: false
                              node_location:
                                type: string
                                example: "{{node}}"
                              node_status:
                                type: string
                                example: UP
                              owner:
                                type: string
                                example: "{{email}}"
                              replicas:
                                type: number
                                example: 1
                              reserved_ports:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    guest_port:
                                      type: number
                                      example: 5999
                                    host_port:
                                      type: number
                                      example: 5999
                                    protocol:
                                      type: string
                                      example: TCP
                                example:
                                  - guest_port: 5999
                                    host_port: 5999
                                    protocol: TCP
                                  - guest_port: 5900
                                    host_port: 5900
                                    protocol: TCP
                                  - guest_port: 8821
                                    host_port: 8822
                                    protocol: TCP
                              screen_sharing_port:
                                type: string
                                example: "5900"
                              ssh_port:
                                type: string
                                example: "8822"
                              tag:
                                type: string
                                example: "{{nodeTag}}"
                              tag_required:
                                type: boolean
                                example: false
                              use_saved_state:
                                type: boolean
                                example: false
                              vcpu:
                                type: number
                                example: 3
                              virtual_machine_id:
                                type: string
                                example: "{{vmID}}"
                              virtual_machine_ip:
                                type: string
                                example: "{{vmIP}}"
                              virtual_machine_name:
                                type: string
                                example: "{{vm}}"
                              vm_status:
                                type: string
                                example: running
                              vnc_port:
                                type: string
                                example: "5999"
                          example:
                            - RAM: 7.5G
                              base_image: "{{baseImage}}"
                              configuration_template: default
                              cpu: 3
                              creationTimestamp: "2020-07-28T11:09:25Z"
                              gpu: N/A
                              image: "{{vm}}"
                              io_boost: false
                              node_location: "{{node}}"
                              node_status: UP
                              owner: "{{email}}"
                              replicas: 1
                              reserved_ports:
                                - guest_port: 5999
                                  host_port: 5999
                                  protocol: TCP
                                - guest_port: 5900
                                  host_port: 5900
                                  protocol: TCP
                                - guest_port: 8821
                                  host_port: 8822
                                  protocol: TCP
                              screen_sharing_port: "5900"
                              ssh_port: "8822"
                              tag: "{{nodeTag}}"
                              tag_required: false
                              use_saved_state: false
                              vcpu: 3
                              virtual_machine_id: "{{vmID}}"
                              virtual_machine_ip: "{{vmIP}}"
                              virtual_machine_name: "{{vm}}"
                              vm_status: running
                              vnc_port: "5999"
                            - RAM: 15.00G
                              base_image: "{{baseImage}}"
                              configuration_template: default
                              cpu: 3
                              creation_timestamp: "2022-02-10T14:01:26Z"
                              gpu: N/A
                              image: "{{vm}}1"
                              io_boost: true
                              node_location: "{{node}}"
                              node_status: UP
                              owner: "{{email}}"
                              replicas: 1
                              reserved_ports:
                                - guest_port: 5999
                                  host_port: 5999
                                  protocol: TCP
                                - guest_port: 5900
                                  host_port: 5900
                                  protocol: TCP
                                - guest_port: 8821
                                  host_port: 8822
                                  protocol: TCP
                              screen_sharing_port: "5900"
                              ssh_port: "8822"
                              tag: ""
                              tag_required: false
                              use_saved_state: false
                              vcpu: 3
                              virtual_machine_id: "{{vmID}}1"
                              virtual_machine_ip: "{{vmIP}}"
                              virtual_machine_name: "{{vm}}1"
                              vm_status: running
                              vnc_port: "5999"
                            - RAM: 15.00G
                              base_image: "{{baseImage}}"
                              configuration_template: default
                              cpu: 3
                              creation_timestamp: "2022-02-10T14:01:45Z"
                              gpu: N/A
                              image: "{{vm}}1"
                              io_boost: true
                              node_location: "{{node}}"
                              node_status: UP
                              owner: "{{email}}"
                              replicas: 1
                              reserved_ports:
                                - guest_port: 5999
                                  host_port: 6000
                                  protocol: TCP
                                - guest_port: 5900
                                  host_port: 5901
                                  protocol: TCP
                                - guest_port: 8821
                                  host_port: 8823
                                  protocol: TCP
                              screen_sharing_port: "5901"
                              ssh_port: "8823"
                              tag: ""
                              tag_required: false
                              use_saved_state: false
                              vcpu: 3
                              virtual_machine_id: "{{vmID}}1"
                              virtual_machine_ip: "{{vmIP}}"
                              virtual_machine_name: "{{vm}}1"
                              vm_status: running
                              vnc_port: "6000"
                            - RAM: 15.00G
                              base_image: "{{baseImage}}"
                              configuration_template: default
                              cpu: 3
                              creation_timestamp: "2022-02-10T14:01:50Z"
                              gpu: N/A
                              image: "{{vm}}1"
                              io_boost: true
                              node_location: "{{node}}"
                              node_status: UP
                              owner: "{{email}}"
                              replicas: 1
                              reserved_ports:
                                - guest_port: 5999
                                  host_port: 6001
                                  protocol: TCP
                                - guest_port: 5900
                                  host_port: 5902
                                  protocol: TCP
                                - guest_port: 8821
                                  host_port: 8824
                                  protocol: TCP
                              screen_sharing_port: "5902"
                              ssh_port: "8824"
                              tag: ""
                              tag_required: false
                              use_saved_state: false
                              vcpu: 3
                              virtual_machine_id: "{{vmID}}1"
                              virtual_machine_ip: "{{vmIP}}"
                              virtual_machine_name: "{{vm}}1"
                              vm_status: running
                              vnc_port: "6001"
                        tag:
                          type: string
                          example: "{{nodeTag}}"
                        tag_required:
                          type: boolean
                          example: false
                        use_saved_state:
                          type: boolean
                          example: false
                        vcpu:
                          type: number
                          example: 6
                        virtual_machine_name:
                          type: string
                          example: "{{vm}}"
                        vm_deployment_status:
                          type: string
                          example: Deployed
                    example:
                      - status:
                          - RAM: 7.5G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creationTimestamp: "2020-07-28T11:09:25Z"
                            gpu: N/A
                            image: "{{vm}}"
                            io_boost: false
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: "{{nodeTag}}"
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}"
                            vm_status: running
                            vnc_port: "5999"
                          - RAM: 15.00G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creation_timestamp: "2022-02-10T14:01:26Z"
                            gpu: N/A
                            image: "{{vm}}1"
                            io_boost: true
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: ""
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}1"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}1"
                            vm_status: running
                            vnc_port: "5999"
                          - RAM: 15.00G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creation_timestamp: "2022-02-10T14:01:45Z"
                            gpu: N/A
                            image: "{{vm}}1"
                            io_boost: true
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 6000
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5901
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8823
                                protocol: TCP
                            screen_sharing_port: "5901"
                            ssh_port: "8823"
                            tag: ""
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}1"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}1"
                            vm_status: running
                            vnc_port: "6000"
                          - RAM: 15.00G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creation_timestamp: "2022-02-10T14:01:50Z"
                            gpu: N/A
                            image: "{{vm}}1"
                            io_boost: true
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 6001
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5902
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8824
                                protocol: TCP
                            screen_sharing_port: "5902"
                            ssh_port: "8824"
                            tag: ""
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}1"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}1"
                            vm_status: running
                            vnc_port: "6001"
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Deployed
                      - base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 6
                        gpu_passthrough: false
                        image: "{{vm}}2"
                        io_boost: false
                        owner: "{{email}}"
                        tag: "{{nodeTag}}"
                        tag_required: false
                        use_saved_state: false
                        vcpu: 6
                        virtual_machine_name: "{{vm}}2"
                        vm_deployment_status: Not Deployed
              examples:
                List your VMs with scaled VMs expanded:
                  value:
                    errors: []
                    help: {}
                    message: ""
                    virtual_machine_resources:
                      - status:
                          - RAM: 7.5G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creationTimestamp: "2020-07-28T11:09:25Z"
                            gpu: N/A
                            image: "{{vm}}"
                            io_boost: false
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: "{{nodeTag}}"
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}"
                            vm_status: running
                            vnc_port: "5999"
                          - RAM: 15.00G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creation_timestamp: "2022-02-10T14:01:26Z"
                            gpu: N/A
                            image: "{{vm}}1"
                            io_boost: true
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: ""
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}1"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}1"
                            vm_status: running
                            vnc_port: "5999"
                          - RAM: 15.00G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creation_timestamp: "2022-02-10T14:01:45Z"
                            gpu: N/A
                            image: "{{vm}}1"
                            io_boost: true
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 6000
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5901
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8823
                                protocol: TCP
                            screen_sharing_port: "5901"
                            ssh_port: "8823"
                            tag: ""
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}1"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}1"
                            vm_status: running
                            vnc_port: "6000"
                          - RAM: 15.00G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 3
                            creation_timestamp: "2022-02-10T14:01:50Z"
                            gpu: N/A
                            image: "{{vm}}1"
                            io_boost: true
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 6001
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5902
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8824
                                protocol: TCP
                            screen_sharing_port: "5902"
                            ssh_port: "8824"
                            tag: ""
                            tag_required: false
                            use_saved_state: false
                            vcpu: 3
                            virtual_machine_id: "{{vmID}}1"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}1"
                            vm_status: running
                            vnc_port: "6001"
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Deployed
                      - base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 6
                        gpu_passthrough: false
                        image: "{{vm}}2"
                        io_boost: false
                        owner: "{{email}}"
                        tag: "{{nodeTag}}"
                        tag_required: false
                        use_saved_state: false
                        vcpu: 6
                        virtual_machine_name: "{{vm}}2"
                        vm_deployment_status: Not Deployed
  /resources/vm/list-disks:
    post:
      tags:
        - VMs
      summary: List disks
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nList the disks attached to the VM specified by ID. The VM must be deployed. The VM must be non-scaled.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: listDisks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: List disks
          content:
            application/json:
              schema:
                type: object
                properties:
                  drives:
                    type: array
                    items:
                      type: object
                      properties:
                        device:
                          type: string
                          example: disk
                        source:
                          type: string
                          example: "{{vm}}"
                        target:
                          type: string
                          example: sda
                        type:
                          type: string
                          example: file
                    example:
                      - device: disk
                        source: "{{vm}}"
                        target: sda
                        type: file
                      - device: disk
                        source: bootloader
                        target: sdb
                        type: file
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                List disks:
                  value:
                    drives:
                      - device: disk
                        source: "{{vm}}"
                        target: sda
                        type: file
                      - device: disk
                        source: bootloader
                        target: sdb
                        type: file
                    errors: []
                    help: {}
                    message: ""
  /resources/vm/list/all:
    get:
      tags:
        - VMs
      summary: List all VMs (Admin)
      description: "Retrieve a list of all VMs and VM configurations for all users in the Orka environment. This operation requires administrative privileges.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: listAllVMsAdmin
      responses:
        "200":
          description: List аll VMs (Admin)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "2314"
            Date:
              schema:
                type: string
                example: "Thu, 19 Sep 2019 14:08:09 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"90a-hbIsDGI3tNWU+cMYDZojDAaKKwE\""
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  virtual_machine_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        base_image:
                          type: string
                          example: "{{baseImage}}"
                        configuration_template:
                          type: string
                          example: default
                        cpu:
                          type: number
                          example: 12
                        gpu_passthrough:
                          type: boolean
                          example: false
                        image:
                          type: string
                          example: "{{vm}}1"
                        io_boost:
                          type: boolean
                          example: false
                        owner:
                          type: string
                          example: "{{newEmail}}"
                        status:
                          type: array
                          items:
                            type: object
                            properties:
                              RAM:
                                type: string
                                example: 30G
                              base_image:
                                type: string
                                example: "{{baseImage}}"
                              configuration_template:
                                type: string
                                example: default
                              cpu:
                                type: number
                                example: 12
                              creationTimestamp:
                                type: string
                                example: "2020-07-28T11:09:25Z"
                              gpu:
                                type: string
                                example: N/A
                              image:
                                type: string
                                example: "{{vm}}"
                              io_boost:
                                type: boolean
                                example: false
                              node_location:
                                type: string
                                example: "{{node}}"
                              node_status:
                                type: string
                                example: UP
                              owner:
                                type: string
                                example: "{{email}}"
                              replicas:
                                type: number
                                example: 1
                              reserved_ports:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    guest_port:
                                      type: number
                                      example: 5999
                                    host_port:
                                      type: number
                                      example: 5999
                                    protocol:
                                      type: string
                                      example: TCP
                                example:
                                  - guest_port: 5999
                                    host_port: 5999
                                    protocol: TCP
                                  - guest_port: 5900
                                    host_port: 5900
                                    protocol: TCP
                                  - guest_port: 8821
                                    host_port: 8822
                                    protocol: TCP
                              screen_sharing_port:
                                type: string
                                example: "5900"
                              ssh_port:
                                type: string
                                example: "8822"
                              tag:
                                type: string
                                example: "{{nodeTag}}"
                              tag_required:
                                type: boolean
                                example: false
                              use_saved_state:
                                type: boolean
                                example: false
                              vcpu:
                                type: number
                                example: 12
                              virtual_machine_id:
                                type: string
                                example: "{{vmID}}"
                              virtual_machine_ip:
                                type: string
                                example: "{{vmIP}}"
                              virtual_machine_name:
                                type: string
                                example: "{{vm}}"
                              vm_status:
                                type: string
                                example: running
                              vnc_port:
                                type: string
                                example: "5999"
                          example:
                            - RAM: 30G
                              base_image: "{{baseImage}}"
                              configuration_template: default
                              cpu: 12
                              creationTimestamp: "2020-07-28T11:09:25Z"
                              gpu: N/A
                              image: "{{vm}}"
                              io_boost: false
                              node_location: "{{node}}"
                              node_status: UP
                              owner: "{{email}}"
                              replicas: 1
                              reserved_ports:
                                - guest_port: 5999
                                  host_port: 5999
                                  protocol: TCP
                                - guest_port: 5900
                                  host_port: 5900
                                  protocol: TCP
                                - guest_port: 8821
                                  host_port: 8822
                                  protocol: TCP
                              screen_sharing_port: "5900"
                              ssh_port: "8822"
                              tag: "{{nodeTag}}"
                              tag_required: false
                              use_saved_state: false
                              vcpu: 12
                              virtual_machine_id: "{{vmID}}"
                              virtual_machine_ip: "{{vmIP}}"
                              virtual_machine_name: "{{vm}}"
                              vm_status: running
                              vnc_port: "5999"
                        tag:
                          type: string
                          example: "{{nodeTag}}"
                        tag_required:
                          type: boolean
                          example: false
                        use_saved_state:
                          type: boolean
                          example: false
                        vcpu:
                          type: number
                          example: 12
                        virtual_machine_name:
                          type: string
                          example: "{{vm}}"
                        vm_deployment_status:
                          type: string
                          example: Deployed
                    example:
                      - status:
                          - RAM: 30G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 12
                            creationTimestamp: "2020-07-28T11:09:25Z"
                            gpu: N/A
                            image: "{{vm}}"
                            io_boost: false
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: "{{nodeTag}}"
                            tag_required: false
                            use_saved_state: false
                            vcpu: 12
                            virtual_machine_id: "{{vmID}}"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}"
                            vm_status: running
                            vnc_port: "5999"
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Deployed
                      - base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 12
                        gpu_passthrough: false
                        image: "{{vm}}1"
                        io_boost: false
                        owner: "{{newEmail}}"
                        tag: "{{nodeTag}}"
                        tag_required: false
                        use_saved_state: false
                        vcpu: 12
                        virtual_machine_name: "{{vm}}1"
                        vm_deployment_status: Not Deployed
              examples:
                List аll VMs (Admin):
                  value:
                    errors: []
                    help: {}
                    message: ""
                    virtual_machine_resources:
                      - status:
                          - RAM: 30G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 12
                            creationTimestamp: "2020-07-28T11:09:25Z"
                            gpu: N/A
                            image: "{{vm}}"
                            io_boost: false
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: "{{nodeTag}}"
                            tag_required: false
                            use_saved_state: false
                            vcpu: 12
                            virtual_machine_id: "{{vmID}}"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}"
                            vm_status: running
                            vnc_port: "5999"
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Deployed
                      - base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 12
                        gpu_passthrough: false
                        image: "{{vm}}1"
                        io_boost: false
                        owner: "{{newEmail}}"
                        tag: "{{nodeTag}}"
                        tag_required: false
                        use_saved_state: false
                        vcpu: 12
                        virtual_machine_name: "{{vm}}1"
                        vm_deployment_status: Not Deployed
  "/resources/vm/list/{email}":
    get:
      tags:
        - VMs
      summary: "List user's VMs (Admin)"
      description: "Retrieve a list of all VMs and VM configurations for the user specified in the endpoint. This operation requires administrative privileges.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: listUserSVMsAdmin
      responses:
        "200":
          description: List VMs for another user (Admin)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "273"
            Date:
              schema:
                type: string
                example: "Thu, 19 Sep 2019 14:06:40 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"111-36FTs9JvE6zXL1kOmLywDT0tJ1A\""
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  virtual_machine_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        base_image:
                          type: string
                          example: "{{baseImage}}"
                        configuration_template:
                          type: string
                          example: default
                        cpu:
                          type: number
                          example: 12
                        gpu_passthrough:
                          type: boolean
                          example: false
                        image:
                          type: string
                          example: "{{vm}}"
                        io_boost:
                          type: boolean
                          example: false
                        owner:
                          type: string
                          example: "{{email}}"
                        status:
                          type: array
                          items:
                            type: object
                            properties:
                              RAM:
                                type: string
                                example: 30G
                              base_image:
                                type: string
                                example: "{{baseImage}}"
                              configuration_template:
                                type: string
                                example: default
                              cpu:
                                type: number
                                example: 12
                              creationTimestamp:
                                type: string
                                example: "2020-07-28T11:09:25Z"
                              gpu:
                                type: string
                                example: N/A
                              image:
                                type: string
                                example: "{{vm}}"
                              io_boost:
                                type: boolean
                                example: false
                              node_location:
                                type: string
                                example: "{{node}}"
                              node_status:
                                type: string
                                example: UP
                              owner:
                                type: string
                                example: "{{email}}"
                              replicas:
                                type: number
                                example: 1
                              reserved_ports:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    guest_port:
                                      type: number
                                      example: 5999
                                    host_port:
                                      type: number
                                      example: 5999
                                    protocol:
                                      type: string
                                      example: TCP
                                example:
                                  - guest_port: 5999
                                    host_port: 5999
                                    protocol: TCP
                                  - guest_port: 5900
                                    host_port: 5900
                                    protocol: TCP
                                  - guest_port: 8821
                                    host_port: 8822
                                    protocol: TCP
                              screen_sharing_port:
                                type: string
                                example: "5900"
                              ssh_port:
                                type: string
                                example: "8822"
                              tag:
                                type: string
                                example: "{{nodeTag}}"
                              tag_required:
                                type: boolean
                                example: false
                              use_saved_state:
                                type: boolean
                                example: false
                              vcpu:
                                type: number
                                example: 12
                              virtual_machine_id:
                                type: string
                                example: "{{vmID}}"
                              virtual_machine_ip:
                                type: string
                                example: "{{vmIP}}"
                              virtual_machine_name:
                                type: string
                                example: "{{vm}}"
                              vm_status:
                                type: string
                                example: running
                              vnc_port:
                                type: string
                                example: "5999"
                          example:
                            - RAM: 30G
                              base_image: "{{baseImage}}"
                              configuration_template: default
                              cpu: 12
                              creationTimestamp: "2020-07-28T11:09:25Z"
                              gpu: N/A
                              image: "{{vm}}"
                              io_boost: false
                              node_location: "{{node}}"
                              node_status: UP
                              owner: "{{email}}"
                              replicas: 1
                              reserved_ports:
                                - guest_port: 5999
                                  host_port: 5999
                                  protocol: TCP
                                - guest_port: 5900
                                  host_port: 5900
                                  protocol: TCP
                                - guest_port: 8821
                                  host_port: 8822
                                  protocol: TCP
                              screen_sharing_port: "5900"
                              ssh_port: "8822"
                              tag: "{{nodeTag}}"
                              tag_required: false
                              use_saved_state: false
                              vcpu: 12
                              virtual_machine_id: "{{vmID}}"
                              virtual_machine_ip: "{{vmIP}}"
                              virtual_machine_name: "{{vm}}"
                              vm_status: running
                              vnc_port: "5999"
                        tag:
                          type: string
                          example: "{{nodeTag}}"
                        tag_required:
                          type: boolean
                          example: false
                        use_saved_state:
                          type: boolean
                          example: false
                        vcpu:
                          type: number
                          example: 12
                        virtual_machine_name:
                          type: string
                          example: "{{vm}}"
                        vm_deployment_status:
                          type: string
                          example: Deployed
                    example:
                      - status:
                          - RAM: 30G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 12
                            creationTimestamp: "2020-07-28T11:09:25Z"
                            gpu: N/A
                            image: "{{vm}}"
                            io_boost: false
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: "{{nodeTag}}"
                            tag_required: false
                            use_saved_state: false
                            vcpu: 12
                            virtual_machine_id: "{{vmID}}"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}"
                            vm_status: running
                            vnc_port: "5999"
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Deployed
                      - base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 12
                        gpu_passthrough: false
                        image: "{{vm}}"
                        io_boost: false
                        owner: "{{email}}"
                        tag: "{{nodeTag}}"
                        tag_required: false
                        use_saved_state: false
                        vcpu: 12
                        virtual_machine_name: "{{vm}}1"
                        vm_deployment_status: Not Deployed
              examples:
                List VMs for another user (Admin):
                  value:
                    errors: []
                    help: {}
                    message: ""
                    virtual_machine_resources:
                      - status:
                          - RAM: 30G
                            base_image: "{{baseImage}}"
                            configuration_template: default
                            cpu: 12
                            creationTimestamp: "2020-07-28T11:09:25Z"
                            gpu: N/A
                            image: "{{vm}}"
                            io_boost: false
                            node_location: "{{node}}"
                            node_status: UP
                            owner: "{{email}}"
                            replicas: 1
                            reserved_ports:
                              - guest_port: 5999
                                host_port: 5999
                                protocol: TCP
                              - guest_port: 5900
                                host_port: 5900
                                protocol: TCP
                              - guest_port: 8821
                                host_port: 8822
                                protocol: TCP
                            screen_sharing_port: "5900"
                            ssh_port: "8822"
                            tag: "{{nodeTag}}"
                            tag_required: false
                            use_saved_state: false
                            vcpu: 12
                            virtual_machine_id: "{{vmID}}"
                            virtual_machine_ip: "{{vmIP}}"
                            virtual_machine_name: "{{vm}}"
                            vm_status: running
                            vnc_port: "5999"
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Deployed
                      - base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 12
                        gpu_passthrough: false
                        image: "{{vm}}"
                        io_boost: false
                        owner: "{{email}}"
                        tag: "{{nodeTag}}"
                        tag_required: false
                        use_saved_state: false
                        vcpu: 12
                        virtual_machine_name: "{{vm}}1"
                        vm_deployment_status: Not Deployed
    parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
  /resources/vm/migrate:
    post:
      tags:
        - VMs
      summary: Migrate VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nMigrate a deployed VM from a selected source node (`current_node_name`) to another destination node (`new_nodes`). You must specify the VM by ID. You can set only one destination node. The destination node should be different from the source node.\n\nThis operation changes the IP of the migrated VM and might change its assigned ports. This operation removes the VM from the source node.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: migrateVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_node_name:
                  type: string
                  example: "{{node}}"
                new_nodes:
                  type: array
                  items:
                    type: string
                    example: "{{newNode}}"
                  example:
                    - "{{newNode}}"
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
            example:
              current_node_name: "{{node}}"
              new_nodes:
                - "{{newNode}}"
              orka_vm_name: "{{vmID}}"
      responses:
        "200":
          description: Migrate VM
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Migrated vm
                  port_warnings:
                    type: array
                    items: {}
                    example: []
                  vm_id:
                    type: string
                    example: "{{vmID}}"
              examples:
                Migrate VM:
                  value:
                    errors: []
                    help: {}
                    message: Migrated vm
                    port_warnings: []
                    vm_id: "{{vmID}}"
  /resources/vm/purge:
    delete:
      tags:
        - VMs
      summary: "Purge user's VMs (Admin)"
      description: "Remove all VMs and VM configurations (of another user) with the specified name. This operation requires administrative privileges.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: purgeUserSVMsAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_vm_name:
                  type: string
                  example: "{{vm}}"
            example:
              orka_vm_name: "{{vm}}"
      responses:
        "200":
          description: Purge for another user (Admin)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "715"
            Date:
              schema:
                type: string
                example: "Wed, 26 Jun 2019 15:29:19 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"2cb-hSoTtSJ6cmuKH6sqMQqZC2s5Z2A\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties:
                      create_virtual_machine_configuration:
                        type: string
                        example: "To create a virtual machine configuration, please use the endpoint {{domain}}/resources/vm/create"
                      deploy_virtual_machine:
                        type: string
                        example: "To deploy a virtual machine, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      list_orka_nodes:
                        type: string
                        example: "To list orka nodes send a rest a request to {{domain}}/resources/node/list"
                      required_request_data_for_create:
                        type: object
                        properties:
                          orka_base_img:
                            type: string
                            example: "<ORKA_BASE_IMG>"
                          orka_image:
                            type: string
                            example: "<ORKA_IMAGE>"
                          orka_vm_name:
                            type: string
                            example: "<ORKA_VM_NAME>"
                      required_request_data_for_deploy:
                        type: object
                        properties:
                          orka_node_name:
                            type: string
                            example: "<ORKA_NODE_NAME>"
                          orka_vm_name:
                            type: string
                            example: "<ORKA_VM_NAME>"
                  message:
                    type: string
                    example: Successfully purged virtual machine
              examples:
                Purge for another user (Admin):
                  value:
                    errors: []
                    help:
                      create_virtual_machine_configuration: "To create a virtual machine configuration, please use the endpoint {{domain}}/resources/vm/create"
                      deploy_virtual_machine: "To deploy a virtual machine, make sure you have a configuration created and use the endpoint {{domain}}/resources/vm/deploy"
                      list_orka_nodes: "To list orka nodes send a rest a request to {{domain}}/resources/node/list"
                      required_request_data_for_create:
                        orka_base_img: "<ORKA_BASE_IMG>"
                        orka_image: "<ORKA_IMAGE>"
                        orka_vm_name: "<ORKA_VM_NAME>"
                      required_request_data_for_deploy:
                        orka_node_name: "<ORKA_NODE_NAME>"
                        orka_vm_name: "<ORKA_VM_NAME>"
                    message: Successfully purged virtual machine
  /resources/vm/scale:
    patch:
      tags:
        - VMs
      summary: Un-scale VM
      description: "> **NOTE**: This request is supported for VMs deployed on Intel nodes only.\n\nUn-scale a scaled VM. This removes any additional replicas of the VM and leaves only one running copy. You must specify the VM by ID. The VM must be deployed.\n\nWhen you scale down, you have no control over which replicas will be destroyed and which one will be preserved. This might result in loss of data.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer` header."
      operationId: unScaleVm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orka_vm_name:
                  type: string
                  example: "{{vmID}}"
                replicas:
                  type: number
                  example: 1
            example:
              orka_vm_name: "{{vmID}}"
              replicas: 1
      responses:
        "200":
          description: Un-scale VM
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Scaled to 1 VMs
              examples:
                Un-scale VM:
                  value:
                    errors: []
                    help: {}
                    message: Scaled to 1 VMs
  "/resources/vm/status/{vm}":
    get:
      tags:
        - VMs
      summary: "Check user's VM status (Admin)"
      description: "Get a detailed status of the VM specified by the name or by ID in the endpoint. The VM might belong to another user. This operation requires administrative privileges.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey:` and `Authorization: Bearer` headers."
      operationId: checkUserSVmStatusAdmin
      responses:
        "200":
          description: "Check another user's VM status - Not Deployed"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  virtual_machine_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        RAM:
                          type: string
                          example: 10.00G
                        base_image:
                          type: string
                          example: "{{baseImage}}"
                        configuration_template:
                          type: string
                          example: default
                        cpu:
                          type: number
                          example: 3
                        gpu_passthrough:
                          type: boolean
                          example: false
                        image:
                          type: string
                          example: "{{vm}}"
                        io_boost:
                          type: boolean
                          example: false
                        owner:
                          type: string
                          example: "{{email}}"
                        use_saved_state:
                          type: boolean
                          example: false
                        vcpu:
                          type: number
                          example: 3
                        virtual_machine_name:
                          type: string
                          example: "{{vm}}"
                        vm_deployment_status:
                          type: string
                          example: Not Deployed
                    example:
                      - RAM: 10.00G
                        base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 3
                        gpu_passthrough: false
                        image: "{{vm}}"
                        io_boost: false
                        owner: "{{email}}"
                        use_saved_state: false
                        vcpu: 3
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Not Deployed
              examples:
                "Check another user's VM status - Not Deployed":
                  value:
                    errors: []
                    help: {}
                    message: ""
                    virtual_machine_resources:
                      - RAM: 10.00G
                        base_image: "{{baseImage}}"
                        configuration_template: default
                        cpu: 3
                        gpu_passthrough: false
                        image: "{{vm}}"
                        io_boost: false
                        owner: "{{email}}"
                        use_saved_state: false
                        vcpu: 3
                        virtual_machine_name: "{{vm}}"
                        vm_deployment_status: Not Deployed
    parameters:
      - name: vm
        in: path
        required: true
        schema:
          type: string
  /token:
    get:
      tags:
        - Environment Checks
      summary: Check token status
      description: "Retrieve information about the token specified in the header. The request returns information about the associated email address, the authentication status of the token, and if the token is revoked.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: checkTokenStatus
      responses:
        "200":
          description: Check token status
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "78"
            Date:
              schema:
                type: string
                example: "Mon, 22 Apr 2019 17:54:27 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"4e-tPcakJW1jFc46SZAfLK7aKnFohY\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    example: true
                  email:
                    type: string
                    example: "{{email}}"
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  is_token_revoked:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: ""
              examples:
                Check token status:
                  value:
                    authenticated: true
                    email: "{{email}}"
                    errors: []
                    help: {}
                    is_token_revoked: false
                    message: ""
    post:
      tags:
        - Tokens
      summary: Create token
      description: "Create an authentication token using an existing user's email and password.\n\nThis operation does not require authentication."
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
                password:
                  type: string
                  example: "{{password}}"
            example:
              email: "{{email}}"
              password: "{{password}}"
      responses:
        "200":
          description: Create token
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "176"
            Date:
              schema:
                type: string
                example: "Thu, 21 Feb 2019 19:00:42 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"b0-Xm0Olx97lPfgZAYdToF40XjwpeM\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  token:
                    type: string
                    example: "{{token}}"
              examples:
                Create token:
                  value:
                    errors: []
                    help: {}
                    message: ""
                    token: "{{token}}"
    delete:
      tags:
        - Tokens
      summary: Revoke token
      description: "Revoke the token passed in the header.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: revokeToken
      responses:
        "200":
          description: Revoke token
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "19"
            Date:
              schema:
                type: string
                example: "Fri, 29 Mar 2019 17:32:55 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"13-tgioHzuZdhnR88Z2jUuPoKaxPiw\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  tokensRevoked:
                    type: number
                    example: 1
              examples:
                Revoke token:
                  value:
                    errors: []
                    help: {}
                    message: ""
                    tokensRevoked: 1
  /users:
    get:
      tags:
        - Users
      summary: Get users
      description: "Retrieve a list of the users in the Orka environment.\n\nThis is an administrative operation. You need to pass the `orka-licensekey: <license>` header."
      operationId: getUsers
      responses:
        "200":
          description: Get users (no groups applied)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  user_count:
                    type: number
                    example: 2
                  user_list:
                    type: array
                    items:
                      type: string
                      example: "{{email}}"
                    example:
                      - "{{email}}"
                      - "{{newEmail}}"
              examples:
                Get users (no groups applied):
                  value:
                    errors: []
                    help: {}
                    message: ""
                    user_count: 2
                    user_list:
                      - "{{email}}"
                      - "{{newEmail}}"
    put:
      tags:
        - Users
      summary: Update user
      description: "Modify the email address or password of the current user. This operation is intended for regular Orka users.\n\nThis is a non-administrative operation and requires token authentication. You need to pass the `Authorization: Bearer <token>` header."
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{newEmail}}"
                password:
                  type: string
                  example: "{{newPassword}}"
            example:
              email: "{{newEmail}}"
              password: "{{newPassword}}"
      responses:
        "200":
          description: Update email
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "62"
            Date:
              schema:
                type: string
                example: "Mon, 22 Apr 2019 18:24:04 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"3e-FiucZKJMwmfKSItlQjJggmtAfy0\""
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  records_updated_count:
                    type: number
                    example: 1
                  user_email:
                    type: string
                    example: "{{newEmail}}"
              examples:
                Update email:
                  value:
                    errors: []
                    help: {}
                    message: ""
                    records_updated_count: 1
                    user_email: "{{newEmail}}"
    post:
      tags:
        - Users
      summary: Create user
      description: "Create a new user in the Orka environment. You need to specify email address and password. You cannot pass an email address that's already in use.\n\n_Usage:_\n* `email`: Required. An email address for the user. This also serves as the username.\n* `password`: Required. A password for the user. Must be at least 6 characters long.\n* `group`: Optional. A user group for the user. Once set, you can no longer change the user group.\n\nThis is an administrative operation. You need to pass the `orka-licensekey: <license>` header."
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
                group:
                  type: string
                  example: myUserGroup
                password:
                  type: string
                  example: "{{password}}"
            example:
              email: "{{email}}"
              group: myUserGroup
              password: "{{password}}"
      responses:
        "201":
          description: Create user (assign group)
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: "{{email}}"
                  errors:
                    type: array
                    items: {}
                    example: []
                  group:
                    type: string
                    example: "{{userGroup}}"
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Create user (assign group):
                  value:
                    email: "{{email}}"
                    errors: []
                    group: "{{userGroup}}"
                    help: {}
                    message: ""
  /users/groups/$ungrouped:
    post:
      tags:
        - Users
      summary: Ungroup users
      description: "Remove a group label from the users specified by email. The specified users must exist on the Orka environment.\n\n> NOTE: This is a BETA feature.\n\nThis is an administrative operation. You need to pass the `orka-licensekey: <license>` header."
      operationId: ungroupUsers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "{{email}}"
              example:
                - "{{email}}"
                - "{{newEmail}}"
            example:
              - "{{email}}"
              - "{{newEmail}}"
      responses:
        "200":
          description: Ungroup users
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: User group labels applied.
              examples:
                Ungroup users:
                  value:
                    errors: []
                    help: {}
                    message: User group labels applied.
  "/users/groups/{userGroup}":
    post:
      tags:
        - Users
      summary: Group users
      description: "Apply a group label to the users specified by email. The specified users must exist on the Orka environment.\n\n> NOTE: This is a BETA feature.\n\nThis is an administrative operation. You need to pass the `orka-licensekey: <license>` header."
      operationId: groupUsers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "{{email}}"
              example:
                - "{{email}}"
                - "{{newEmail}}"
            example:
              - "{{email}}"
              - "{{newEmail}}"
      responses:
        "200":
          description: Group users
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: User group labels applied.
              examples:
                Group users:
                  value:
                    errors: []
                    help: {}
                    message: User group labels applied.
    parameters:
      - name: userGroup
        in: path
        required: true
        schema:
          type: string
  /users/password:
    post:
      tags:
        - Users
      summary: Reset password (Admin)
      description: "Reset the password for the specified user. This operation is intended for administrators.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: resetPasswordAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "{{email}}"
                password:
                  type: string
                  example: "{{newPassword}}"
            example:
              email: "{{email}}"
              password: "{{newPassword}}"
      responses:
        "200":
          description: Reset password
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Password successfully reset.
              examples:
                Reset password:
                  value:
                    errors: []
                    help: {}
                    message: Password successfully reset.
  "/users/{email}":
    delete:
      tags:
        - Users
      summary: Delete user
      description: "Delete the user specified in the endpoint. The user must have no Orka resources associated with them (other than their authentication tokens). This operation invalidates all tokens associated with the user.\n\nThis operation requires both token and license authentication. You need to pass both the `orka-licensekey: <license>` and `Authorization: Bearer <token>` headers."
      operationId: deleteUser
      responses:
        "200":
          description: Delete user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: "User {{email}} had no associated resources and has been deleted. User's tokens invalidated."
                  user_deleted:
                    type: boolean
                    example: true
              examples:
                Delete user:
                  value:
                    errors: []
                    help: {}
                    message: "User {{email}} had no associated resources and has been deleted. User's tokens invalidated."
                    user_deleted: true
    parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
  /validate-license-key:
    get:
      tags:
        - Environment Checks
      summary: Validate license key
      description: "Check if the license key specified in the body is authorized or not.\n\nThis operation does not require authentication."
      operationId: validateLicenseKey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseKey:
                  type: string
                  example: "{{licenseKey}}"
            example:
              licenseKey: "{{licenseKey}}"
      responses:
        "200":
          description: Validate license key - Authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Provided license key is valid
              examples:
                Validate license key - Authorized:
                  value:
                    errors: []
                    help: {}
                    message: Provided license key is valid
        "401":
          description: Validate license key - Unauthroized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: Provided license key is not valid
                    example:
                      - message: Provided license key is not valid
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
              examples:
                Validate license key - Unauthroized:
                  value:
                    errors:
                      - message: Provided license key is not valid
                    help: {}
                    message: ""
  /validation-requirements:
    get:
      tags:
        - Environment Checks
      summary: Check password requirements
      description: "Retrieve the current password requirements for creating an Orka user.\n\nThis operation does not require authentication."
      operationId: checkPasswordRequirements
      responses:
        "200":
          description: Check password requirements
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: {}
                    example: []
                  help:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: ""
                  password_length:
                    type: number
                    example: 6
              examples:
                Check password requirements:
                  value:
                    errors: []
                    help: {}
                    message: ""
                    password_length: 6
tags:
  - name: Users
    description: "All requests in this group are related to user management operations. All requests, except `update user`, are administrative and require the `orka-license: <license>` header. This authentication method will be deprecated when user roles are rolled out.\n\nCurrently, Orka provides basic administrative user management. All users have the same roles and permissions over the Orka environment. In future versions, you will be able to assign user roles and limit user's permissions."
  - name: Tokens
    description: "All requests in this group are related to token management.\n\nTokens do not expire but administrators can revoke them. Tokens associated with a user are invalidated when the user is deleted."
  - name: VMs
    description: "All requests in this group are related to the management and life cycle of virtual machines and virtual machine configurations in Orka.\n\nA **VM configuration** is a template configuration (a container template) consisting of a base image, a snapshot image, and the number of CPU cores to be used. To become a VM that you can run in the cloud, a VM configuration needs to be deployed to a node.\n\nA **VM** is a virtual machine deployed on a node from an existing VM configuration or cloned from an existing virtual machine. In the case of macOS VMs, this is a full macOS VM inside of a Docker container.\n\nYou can deploy multiple VMs from a single VM configuration. Once created, you can no longer modify a VM configuration."
  - name: Nodes
    description: "All requests in this group are related to the management of Orka nodes.\n\nA **node** is a physical or logical host that provides computational resources for your VMs. When deploying a VM configuration, you need to select a node with sufficient free computational resources to meet the configuration requirements, or allow Orka to use its default system to select a free node.\n\nWhen you let Orka allocate a node for a single VM, the service uses a random algorithm to select a node and then checks for available resources. When Orka needs to allocate resources for multiple VMs, the default Kubernetes scheduler is used."
  - name: Images
    description: "All requests in this group, except `generate empty storage`, are related to the management of base images. `generate empty storage` handles the creation of additional storage for your VMs.\n\nA **base image** is an existing bootable disk image file stored in Orka and used exclusively for the creation of VM configurations. The actual storage for newly deployed VMs is based on the base image specified by the user.\n\nBase images remain unchanged over time and can be used again and again for the creation of VMs and VM configurations. To change a base image, you can `commit` the changes from a running VM to it. To optimize a base image for the deployment and booting of a specific VM configuration, you can perform a `live commit`. You can create a new base image by saving the disk image of a deployed VM.\n\nBase images are stored as `.img` files in the Orka storage. Base images live in the Image Manager namespace and are shared across the same Orka environment. All users can access them and use them to create VM configurations."
  - name: ISOs
    description: "All requests in this group are related to the management of ISO files used for installing macOS.\n\n> **NOTE**: All ISO requests are supported for Intel nodes only."
  - name: Kube-Accounts
    description: "All requests in this group are related to the management of kube-accounts.\n\nA **kube-account** is a Kubernetes service account used for the management of a node with `kubectl`. Each kube-account has a `kubeconfig`."
  - name: Logs 1.0 (deprecated)
    description: "> NOTE: Logs 1.0 is **deprecated** and will be removed in the future.  \n> Check Logs 2.0 and all its benefits.\n\nAll requests in this group are related to the management of the logs for your Orka environment. The logs provide detailed information about every CLI command or API request executed against the environment."
  - name: Logs 2.0
    description: All requests in this group are related to the management of the logs for your Orka environment. The logs provide detailed information about every CLI command or API request executed against the environment.
  - name: Environment Checks
    description: "All requests in this group are related to Orka environment checks such as token and license key validation, and health checks."
